{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction to OpenWorm","text":""},{"location":"#welcome","title":"Welcome","text":"<p>OpenWorm is an open source project and open science community dedicated to creating the world's first whole organism in a computer, a C. elegans nematode, via bottom-up \"systems biology\" computational modeling. </p> <p>It is an association of highly motivated scientists, engineers, coders, and curious citizens from around the world who believe in open science and open access.</p>"},{"location":"#table-of-contents","title":"Table Of Contents","text":"<ul> <li>Projects</li> <li>Community</li> <li>Background</li> <li>Modeling Approach</li> <li>Resources</li> <li>Frequently Asked Questions</li> </ul>"},{"location":"#missionvision","title":"Mission/Vision","text":"<p>The complexity of computational neuroscience and biology make it extremely difficult to sort through the myriad of facts, data, and biological processes that are uncovered on a daily basis by researchers around the world.</p> <p>OpenWorm believes that the challenges of solving brain simulation, even for the simplest of model organisms, require open access and collaborative solutions.</p> <p>OpenWorm is actively working to achieve its goal of creating the world's first virtual organism in a computer by:</p> <ul> <li>bringing together highly motivated scientists and engineers in an open space</li> <li>pushing away all the red tape by taking open science to the extreme</li> <li>fostering growth of a completely open computational biology community</li> </ul>"},{"location":"#goal","title":"Goal","text":"<p>Our main goal is to build the world's first virtual organism - an in-silico implementation of a living creature - for the purpose of achieving an understanding of the events and mechanisms of living cells. Our secondary goal is to enable, via simulation, unprecedented in-silico experiments of living cells to power the next generation of advanced systems biology analysis, synthetic biology, computational drug discovery and dynamic disease modeling.</p>"},{"location":"#navigating-openworm","title":"Navigating OpenWorm","text":"<p>We've created this documentation to help orient you to the different locations on the web where OpenWorm material is found and where contributions can be made.</p> <p>The modeling approach page explains how we have broken down this problem and what steps we are currently taking.</p> <p>The resources page has a gallery of content that has been produced by the project, including simulation engines, visualization environments, and data sets.</p> <p>There are a lot of additional questions you may have about the project. We have assembled a frequently asked questions (FAQ) document to help you. You may also wish to use the search feature in our documentation (top left).</p>"},{"location":"#contributing-to-openworm","title":"Contributing to OpenWorm","text":"<p>We primarily use Slack to communicate and coordinate our daily activities, you are welcome to join us! For an invitation, fill out our volunteer application form.</p> <p>We recommend as well that you sign up to this mailing list (though not as active as Slack) and peruse the archives to get a sense of what is going on.</p> <p>Then, please browse our project list to understand the different areas where work is happening. To put the projects in context, you will find it useful to read more about the big picture idea of the modeling approach we are taking.</p> <p>If you are interested in a specific programming language, check out links to issues specifically for Python or C++. We also have a lot of Java and Javascript/HTML/CSS development going on as part of Geppetto. See the list of Geppetto issues here.</p> <p>If you have questions about specific things you find, please post them to the list.</p> <p>More information about the process of making a contribution is available on our community page</p> <p>While the heart of OpenWorm is computational modeling, we are always looking for people with talents beyond programming to contribute. Are you a graphic designer, writer, PR specialist or simply someone with a love of science and expertise to share? Please reach out to us at info@openworm.org to discuss opportunities with OpenWorm.</p>"},{"location":"Live-Video-Protocol/","title":"Live Video Protocol","text":"<p>How to set up a live video stream:</p> <p>1) download the video encoder Xsplit Broadcaster.</p> <p>2) set up account, or login via social media account.</p> <p>First, let's set up a scene</p> <p>We can define our broadcast by establishing a series of scenes, which are in turn made up of a series of media types. Click on the \"Scene 1\" button at the bottom right.</p> <ul> <li> <p>let's add a webcam feed to Scene 1. To do this, Add &gt;&gt; Devices &gt;&gt; Video &gt;&gt; Webcam (your active webcam)</p> </li> <li> <p>a live webcam feed should be visible. Stretch and move the image as desired. Now let's add a Desktop feed. Go to Add &gt;&gt; Screen Capture. A crosshairs should appear on your Desktop. Click once on the desired action (process such as a web browser) you want to capture. </p> </li> <li> <p>your window should be visible in Scene 1 as well. Stretch and move the image as desired.</p> </li> <li> <p>Don't forget an audio feed. To select the microphone, go to Tools &gt;&gt; Learning &gt;&gt; Settings &gt;&gt; Audio tab &gt;&gt; Microphone (--). Click on Apply button.</p> </li> </ul> <p>Now, let's broadcast!</p> <p>To set up a new output, select Outputs &gt;&gt; New Output. You can select from live streams such as Facebook, YouTube, Twitter, and Twitch. YouTube and Facebook are known to work pretty seamlessly, and can be configured to your own account. Go through the details for each option. </p> <ul> <li> <p>before you broadcast live, test your template out by recording locally. To do this, go to Outputs &gt;&gt; Local Recording.</p> </li> <li> <p>once you are done with the live stream, the video should be saved to your timeline (Facebook) or video list (YouTube). Go to your Facebook or YouTube account to archive and share as desired.</p> </li> </ul>"},{"location":"background/","title":"Project Background","text":""},{"location":"background/#history","title":"History","text":"<p>Established in January 2011, OpenWorm has since that time built a community of highly-motivated and highly-skilled individuals and coordinated their work. This community has produced scientific publications making use of scientific research published through open access, helping to show the validity of the open science approach we have taken.</p> <p>Please visit here for a more extensive history of the project.</p> <p>More information is available on the past history of OpenWorm releases.</p>"},{"location":"background/#why-do-this","title":"Why do this?","text":"<p>There has never been a scientific result in biology or neuroscience that is inconsistent with the idea that brains are 100% physical matter. We tend to forget, but our brains are tissues just like our lungs and heart are. If I could stick an electrode in your brain right now I could record activity from your neurons that corresponds with your thoughts. The problem is that scientists can't understand what all that activity means yet.</p> <p>Scientists can make models of sending a rocket to land on the surface of Mars, but not a model of all the activity of your brain. Scientists lack well-agreed upon models of complex neuronal activity because such models are hard to produce.</p> <p>Complex neuronal activity is the result of countless interactions between molecules happening inside, between, and around neurons. Because of all the interactions that make up complex neuronal activity, you need to gather up a lot of information to make models of it. Also because of all those interactions, you need sophisticated software platforms to manage all that information properly.</p> <p>We are building a simulation platform to prove it is possible to make good models of complex neuronal activity, starting with a digital worm. We are making the simulation platform open source because we believe anyone should be able to use it to understand how neurons and cells work.</p>"},{"location":"background/#why-c-elegans","title":"Why C. elegans?","text":"<p>In the field of neuroscience, one of the simplest organisms that are studied is Caenorhabditis elegans, or C. elegans for short. It only has 302 neurons, has a very consistent lifecycle, and is well studied. Its whole body has only 1000 cells total. With those 1000 cells it solves basic problems of feeding, mate-finding, predator and toxin avoidance using a nervous system driving muscles on a body in a complex world.</p> <p>The cells in its body work together to produce its behavior. Instead of starting with the behavior and building a simple system to capture it, we are starting with making models of the individual cells and their interactions. If we do this correctly so that the cells act on each other as they do in the real organism, we will have a much more realistic model than we would get trying to go straight to the behavior.</p> <p>This seems to us the only sensible starting point to creating a true biological simulation that captures enough details and has enough constraints to approximate real biology. Simulating a single cell that doesn't move (like a yeast cell) isn't going to provide us enough of a foundation to build up to more complex organisms by itself. If we can't accomplish a simulation at this humble scale, we'll never be able to do it at the massive scale of the human brain. The technology that would come out of this endeavor would be applicable to much more complex organisms down the road.</p>"},{"location":"background/#on-models","title":"On models","text":"<p>Models are the cornerstone of science. Tools like algebra, calculus, Newtonian mechanics and computer spreadsheets were advances because we could plug numbers into equations and get answers out that told us something about the world.</p> <p>Unfortunately, neuroscience has few predictive models for how nervous systems work.</p> <p>We are starting by building a full simulation of a small biological system with a reasonable number of parts. We are focused on capturing as much of the rich detail of that biological system as possible.</p>"},{"location":"background/#concepts","title":"Concepts","text":""},{"location":"background/#top-down-simulation","title":"Top-down simulation","text":"<p>Our first instincts when looking at a system we want to simulate is to come up with a list of its obvious features and then try to pick the simplest means of simulating it. In the case of obvious top-down ways to model a worm, one might capture the fact that it bends in a sinusoidal pattern as a good starting point, and begin implementing sine and cosine functions that can capture this.</p> <p>There is an important place for this kind of simulation, but we have found that one rapidly runs into limitations of generalization. The model that worked great for crawling no longer works for turning around. The simplest thing possible is added to the model to make it work for turning around, but soon there is another aspect to capture, and then another. Soon, the model is a series of hacks that become increasingly brittle.</p> <p>Instead of a pure top-down approach, we employ a balanced top-down, bottom-up approach, with a greater emphasis on the bottom up.</p>"},{"location":"background/#bottom-up-simulation","title":"Bottom-up simulation","text":"<p>Biology teaches us that when it comes to understanding how animals work, understanding the behavior of cells is critical. Our bodies are made up of between 40 and 100 trillion cells, and it is these cells working together that make up everything we are and do. Of particular interest are the cells in the brain and larger nervous system, that are responsible for our thoughts, creativity and feelings.</p> <p>Today, science has barely scratched the surface of how to make best use of the enormous power of computers to create models of cellular activity. Scientists have not yet placed computer models of cells at the center of biology.</p> <p>A \"bottom-up\" simulation, in this case, is an attempt to model the individual cells in the organism, giving them behaviors which, when combined together, produce the outward behavior of the entire organism. This is as opposed to building the organism without consideration for individual cells to start with, and adding cells in later.</p> <p>In reality, we always have to do some bottom-up simulation along with top-down simulation, in order to make progress. But in general and where possible, we view what we are doing as focused on simulating cells first.</p>"},{"location":"background/#multi-algorithm-integration","title":"Multi-algorithm integration","text":"<p>Just as mathematics has played a crucial role in the description of physics, mathematicians have approached the field of biology with the goal of describing biological activity more precisely. Generally speaking, this means that if it happens inside a biological organism, there should be a set of equations that can explain how it works. A great deal of creativity goes into coming up with such equations.</p> <p>Once equations have been determined, computers are great at calculating them once they have been turned into algorithms. Algorithms become the computer's way of handling a bunch of equations.</p> <p>The challenge is that there are a lot of equations that are necessary to fully specify how cellular activity works. A recent whole cell model of a relatively simple cell came up with 32 algorithms composed of many more equations and a ton of data.</p> <p>The consequence of this from an engineering perspective is, in order to simulate complex living systems, we need software that is flexible enough to let us assemble the algorithms we need in just the right ways. We call this \"multi-algorithm integration\".</p>"},{"location":"background/#model-optimization","title":"Model optimization","text":"<p>There are a lot of aspects of C. elegans that we will not be able to measure directly for a while based on experimental limitations. These are \"free parameters\". The conventional wisdom on modeling is to minimize the number of free parameters as much as possible. Sometimes, the large number of free parameters are used as an argument to avoid making computational simulations.</p> <p>In this case, we have to make do with what we have and make some good educated guesses about the free parameters. There is a mathematical discipline that helps us do that known as optimization. For our purposes, you can think of this as generating many different versions of a model, each version with slightly different parameters, and then measuring if the model produces good results. If a model produces better results by changing the parameters in a particular way, you try to keep changing the parameters in that way and see if you get even better results. In this way, roughly speaking, optimization techniques enable scientists to turn a problem of lack of data into a problem that a computer can address using brute force calculations.</p>"},{"location":"background/#neuroml","title":"NeuroML","text":"<p>NeuroML is an XML (Extensible Markup Language) based model description language that aims to provide a common data format for defining and exchanging models in computational neuroscience. The focus of NeuroML is on models which are based on the biophysical and anatomical properties of real neurons. NeuroML is known as an open standard, because its means of describing a model is publicly available for others to improve upon.</p>"},{"location":"community/","title":"OpenWorm Community","text":"<p>This page contains information intended to help individuals understand what steps to take to make contributions to OpenWorm, how to join OpenWorm meetings, how to interact with the community online, and how to become an OpenWorm core member.</p>"},{"location":"community/#an-opening-note","title":"An Opening Note","text":"<p>Feeling lost? Not uncommon in open source projects. In fact, there are whole papers describing the kinds of problems you may be having and some proposed solutions. Help us make helping you easier by reaching out to us to ask for help.</p>"},{"location":"community/#contribution-best-practices","title":"Contribution Best Practices","text":"<p>What do I work on? We outline the work we are doing in the project using GitHub issues. Therefore, in order to figure out what to help out on, you need to be able to check them out for yourself. One way is to use this documentation to find a project you want to contribute to.</p>"},{"location":"community/#find-tasks-to-work-on","title":"Find tasks to work on","text":"<p>Another way is you can browse the Project level view of issues directly.</p> <p>Other key boards:</p> <ul> <li>Geppetto</li> <li>Movement Validation</li> <li>Muscle-Neuron-Channel integration</li> </ul>"},{"location":"community/#come-chat-with-us","title":"Come chat with us!","text":"<p>You can initiate a conversation with us on Slack channels to get more specific about issues.  We ask that you just sign up as a contributor before receiving an invite to join our Slack channel first by filling out the form here.  Once you are logged in, you will find channels such as:</p> <ul> <li>General</li> <li>Geppetto</li> <li>Movement Validation</li> <li>Muscle model</li> <li>ChannelWorm</li> </ul> <p>Once you have identified an issue you want to work on from a particular project, please announce your intention to help out by commenting on the specific GitHub issue.</p>"},{"location":"community/#using-openworm-repos-on-github","title":"Using OpenWorm repos on GitHub","text":"<p>Making a contribution of code to the project will first involve forking one of our repositories, making changes, committing them, creating a pull request back to the original repo, and then updating the appropriate part of documentation.</p> <p>An alternate way to contribute is to create a new GitHub repo yourself and begin tackling some issue directly there. We can then fork your repo back into the OpenWorm organization at a later point in order to bring other contributors along to help you.</p> <p>More details on best practices using OpenWorm repos on GitHub are available on a separate page.</p>"},{"location":"community/#creating-organizing-documents","title":"Creating organizing documents","text":"<p>Another great way to contribute is by organizing ideas or documentation or proposals via a Google doc, and then sharing the link on our Slack.</p> <p>To contribute documentation and materials to the OpenWorm Google Drive, log into your Gmail account and click on this link.</p> <p>All documents located in the OpenWorm folder is viewable to the public. Comments can be added to both text documents and spreadsheets. In order to edit existing documents or to add a new document, you will need to be added to the folder. You can request access by email your Google ID to info@openworm.org.</p>"},{"location":"community/#taking-notes-as-google-docs","title":"Taking notes as Google docs","text":"<p>It is very useful to create notes and progress reports as the result of meetings as Google docs. Docs should be shared publicly with view and comment access.</p> <p>An effective progress report should contain the following information:</p> <ul> <li>Meeting title</li> <li>Attendees</li> <li>Date</li> <li>Goal being worked on (link back to doc page describing project)</li> <li>Previous accomplishments</li> <li>Recent progress towards goal</li> <li>Next Steps</li> <li>Future Steps</li> </ul> <p>An example of an effective progress report is available online.</p> <p>Once the document is shared, it should be announced on Slack.</p>"},{"location":"community/#creating-proposals-as-google-docs","title":"Creating proposals as Google docs","text":"<p>To gather public comment on a direction for the project, it is often effective to create a proposal as a world-editable Google Doc. Once your document is created and shared, it should be announced on Slack.</p> <p>An example of an effective proposal is available online.</p>"},{"location":"community/#contributing-to-the-openworm-documentation","title":"Contributing to the OpenWorm documentation","text":"<p>The OpenWorm documentation is a searchable repository of knowledge we have assembled to help new users get oriented to the different areas of the project. When new contributions are made, it is important that they are incorporated into the appropriate part of the documentation.  The GitHub repo for the OpenWorm documentation is here.  An issues list for changes that we are working on to improve the documentation is here.</p> <p>When they are ready to consume by the general public, simulation engines, visualization environments, and data sets should be added to the resources page.</p> <p>Information about the goals, progress, and roadmap of current or proposed projects should be added to the projects page.</p> <p>The docs use \"GitHub-flavored\" markdown format. This makes writing for GitHub (where most of our code is stored) and writing the documentation seamless. Markdown is also more forgiving in its syntax than, say, ReSTructured text, which was used previously.</p> <p>The documentation is published using GitHub Pages, which helps it remain searchable and beautiful.</p> <p>The markdown documentation is rendered using the Python module MkDocs, making theming and structuring much easier. The outline of the Table of Contents tree is structured in <code>mkdocs.yml</code>.</p> <p>After issuing a pull request and merging to master, changes that appear in GitHub will automatically trigger a hook that will cause the documentation on GitHub Pages (and available at http://docs.openworm.org) to become rebuilt and pushed onto the site (using a GitHub Action).</p>"},{"location":"community/#guest-blog-post","title":"Guest Blog Post","text":"<p>We love hearing about what members are of the OpenWorm community are doing. If you have something to share, contact us at info@openworm.org to discuss.</p>"},{"location":"community/#journal-clubs","title":"Journal Clubs","text":"<p>Every few months an academic journal article comes along we can't resist talking about. We host a journal club where we invite scientists to present on the paper and to host a discussion about it, hopefully with some of the article authors.</p> <p>You can see past journal clubs we have conducted online.</p> <p>If you have an idea for a good journal club, please contact us at info@openworm.org.</p>"},{"location":"community/#coding-standards","title":"Coding Standards","text":"<p>It is recommended to follow the PEP8 Guidelines. For contributions of Python code to OpenWorm repositories. Compliance can be checked with the pep8 tool and autopep8.</p>"},{"location":"community/#meetings","title":"Meetings","text":""},{"location":"community/#working-meetings","title":"Working meetings","text":"<p>Contributors are encouraged to meet with each other on Slack on a regular basis to advance areas of the project they need interaction on.</p>"},{"location":"community/#scheduling-meetings","title":"Scheduling meetings","text":"<p>We like using the Doodle service for scheduling meetings. This makes it easy to find times to meet across various time zones. Once a meeting is scheduled, we will often create a Google Calendar event to track it and remind everyone it is occurring.</p>"},{"location":"community/#interactions","title":"Interactions","text":""},{"location":"community/#mailing-lists","title":"Mailing Lists","text":"<p>There are two Google Groups in connection with OpenWorm.</p> <p>This list was for general updates and announcements related to the project.</p> <p>This list was for high-volume type technical discussions, day-to-day communications, and questions related to the OpenWorm project.</p> <p>\u26a0 NOTE: Discussions have moved to Slack. The mailing lists above have become quiet of late... Most of the in depth discussions in the project have moved to Slack.</p>"},{"location":"community/#twitter","title":"Twitter","text":"<p>Follow our Twitter feed</p> <p>Want to tag OpenWorm on a tweet? Use @openworm and share the love.</p>"},{"location":"community/#blog","title":"Blog","text":"<p>Our blog is hosted in Tumblr.</p> <p>Interesting in being a guest on our blog? We love hearing about what members of the OpenWorm community are doing. If you have something to share, contact us at info@openworm.org to discuss.</p>"},{"location":"community/#youtube","title":"YouTube","text":"<p>Our YouTube channel is currently quite out of date, but for historical purposes, you can view our YouTube channel here.</p> <p>Want to get notified when new content goes live? Subscribe to the channel by clicking on the \"subscribe\" button while logged in to your Google account.</p>"},{"location":"community/#playlists","title":"Playlists","text":"<ul> <li>Status Updates - Frequent updates from the OpenWorm team.</li> <li>Journal Clubs - Like journal clubs that meet in person, the OpenWorm journal clubs use discuss new discoveries, tools and resources related to neuroscience, C. elegans, computational biology and open source science. Journal clubs are posted to social media in advance for any to watch and recordings then become available on YouTube. Learn more about our journal clubs.</li> <li>Data Team meetings - Learn more about our team meetings.</li> <li>Real C. elegans</li> <li>Building Blocks</li> </ul>"},{"location":"community/#membership","title":"Membership","text":"<p>More information about the membership policy is available on a separate page.</p>"},{"location":"community/#use-of-openworm-logo","title":"Use of OpenWorm logo","text":"<p>The OpenWorm logo font is Kefa.</p> <p>This is the OpenWorm logo:</p> <p></p> <p>Click here for a vector version of the logo.  All three layers are vector.</p> <p>It may be adapted for subteams.  Please follow these style rules when doing so:</p> <ul> <li>Don't apply effects (e.g. shadows) to the text; use flat style</li> <li>If any icon is added it should be flat looking and its colour should be #92bd1e</li> <li>Do not use detailed/real looking graphics</li> <li>Keep it simple</li> <li>Do not alter the OpenWorm logo itself</li> <li>Logo needs to be readable when rendered in grayscale</li> </ul> <p>Such logos are subject to review by the core team to retain consistency across the project.</p>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#openworm-general","title":"OpenWorm general","text":""},{"location":"faq/#why-c-elegans","title":"Why C. elegans?","text":"<p>The tiny worm C. elegans is by far the most understood and studied animal with a brain in all of biology. It was the first multi-cellular organism to have its genome mapped. It has only ~1000 cells and exactly 302 neurons, which have also been mapped as well as its \u201cwiring diagram\u201d making it also the first organism to have a complete connectome produced. This part gets particularly exciting for folks interested in artificial intelligence or computational neuroscience.</p> <p>Three different Nobel prizes have been awarded for work on this worm, and it is increasingly being used as a model for better understanding disease and health relevant to all organisms, including humans. When making a complex computer model, it is important to start where the data are the most complete.</p>"},{"location":"faq/#what-does-the-real-worm-do","title":"What does the real worm do?","text":"<p>It has all sorts of behaviors! Some include:</p> <ul> <li>It finds food and mates</li> <li>It avoids toxins and predators</li> <li>It lays eggs</li> <li>It crawls and there are a bunch of different crawling motions</li> </ul>"},{"location":"faq/#do-you-simulate-all-that","title":"Do you simulate all that?","text":"<p>We've started from a cellular approach so we are building behavior of individual cells and we are trying to get the cells to perform those behaviors. We are starting with simple crawling. The main point is that we want the worm's overall behavior to emerge from the behavior of each of its cells put together.</p>"},{"location":"faq/#so-say-the-virtual-organism-lays-eggs-are-the-eggs-intended-to-be-new-viable-openworms-or-is-fertilization-not-a-goal","title":"So say the virtual organism lays eggs. Are the eggs intended to be new, viable OpenWorms, or is fertilization not a goal?","text":"<p>Right now we aren't addressing the egg laying or development capacity, however, the worm does have the best known developmental history of any organism so it would be really interesting to work on a computational development model.</p>"},{"location":"faq/#does-it-need-to-know-how-to-be-a-worm-to-act-like-a-worm","title":"Does it need to know how to be a worm to act like a worm?","text":"<p>The \"logic\" part comes from the dynamics of the neurons interacting with each other. it is a little unintuitive but that's why makes up how it \"thinks\". So we are simulating those dynamics as well as we can rather than instructing it what to do when. Of course that will require a good mechanical model of how CE muscles respond to stimulation.</p>"},{"location":"faq/#given-all-that-we-dont-know-about-c-elegans-all-the-various-synaptic-strengths-dynamics-gap-junction-rectification-long-range-neuromodulation-etc-how-do-you-know-the-model-you-eventually-make-truly-recapitulates-reality","title":"Given all that we DON'T know about C. elegans (all the various synaptic strengths, dynamics, gap junction rectification, long-range neuromodulation, etc.), how do you know the model you eventually make truly recapitulates reality?","text":"<p>All models are wrong, some models are useful :) We must have the model make a prediction and then test it. Based on how well the model fits the available data, we can quantify how well the model recapitulates reality.</p> <p>We are currently evaluating the database behind a recent paper on C. elegans behavioral analysis, which resides here, as the standard we will use to test the model's external behavior. More on this here.</p> <p>As an analogy to what we are aiming for, we are inspired by the work of the Covert lab in the creation of a whole cell simulation that predicts phenotype from genotype at 80% accuracy. This is just a single cell model, but it has the same challenges of high complexity and fundamental understanding gaps that must be bridged via good assumptions.</p>"},{"location":"faq/#is-there-only-one-solution-to-all-those-variables-in-the-connectome-that-will-make-a-virtual-c-elegans-that-resembles-a-real-one-or-are-there-multiple","title":"Is there only one solution to all those variables in the connectome that will make a virtual C. elegans that resembles a real one, or are there multiple?","text":"<p>It is very likely to be multiple, given what we know about the variability of neuronal networks in general. One technique to deal with this is to generate multiple models that work and analyze them under different conditions. What we are after is the solution space that works (see Fig 6 for an example), rather than a single solution. That said, it is extremely likely that the solution space is much smaller than the complete space of possibilities.</p>"},{"location":"faq/#why-not-start-with-simulating-something-simpler-are-nematodes-too-complex-for-a-first-go-at-whole-organism-simulation","title":"Why not start with simulating something simpler? Are nematodes too complex for a first go at whole organism simulation?","text":"<p>Nematodes have been studied far more than simpler multi-cellular organisms, and therefore more data exist that we can use to build our model. We would need to get, for example, another connectome and another anatomical 3D map whereas in C. elegans they already exist. The community of scientists using C. elegans as their model organism is much larger than communities that studying simpler multi-cellular organisms, so the effect of the community size also weighed in on the decision.</p>"},{"location":"faq/#when-do-you-think-the-simulation-will-be-complete-and-which-behaviors-would-that-include","title":"When do you think the simulation will be \"complete\", and which behaviors would that include?","text":"<p>Completion is a functional standard -- so it is complete when it fits all available data about worm behavior. Today, the gold standard for available data about worm behavior is encapsulated in the WormBehavior database, described here. More information from the paper.</p> <p>At the moment we are focusing on integrating an electrophysiological simulation of the nervous system with a elastic matter and fluid dynamics simulation for how the body of the worm interacts with the environment. You can read more about this here</p> <p>Once the simulation of the nervous system is driving the physics-enabled body of the worm around a simulated petri dish, it will be comparable to the WormBehavior database. The degree of overlap between the simulated worm and the behavior of real worms will be very interesting to see --we are very curious to find this out!</p>"},{"location":"faq/#currently-what-are-your-biggest-problems-or-needs","title":"Currently, what are your biggest problems or needs?","text":"<p>To make this project move faster, we'd love more help from motivated folks. Both programmers and experimentalists. We have a lot we want to do and not enough hands to do it. People who are skeptical about mammal whole-brain simulations are prime candidates to be enthusiastic about whole-worm simulations. Read more about ways to help on our website.</p>"},{"location":"faq/#where-i-could-read-about-your-to-dos","title":"Where I could read about your \"to do's?\"","text":"<p>We have a set of high level milestones for the modeling direction we are taking up on GitHub. We also have a master board of all issues across all our GitHub repositories that show a bunch of programming tasks we are working on.</p>"},{"location":"faq/#how-do-i-know-which-issues-are-safe-to-work-on-how-do-i-know-i-wont-be-stepping-on-any-toes-of-work-already-going-on","title":"How do I know which issues are safe to work on? How do I know I won't be stepping on any toes of work already going on?","text":"<p>The high-volume mailing list is the organizing mechanism of first resort when determining these questions. If you are interested in helping with an issue but don't know if others are working on it, search on the list, and if you don't see a recent update, post on the list and ask. The mechanism of second resort is to ask a question in the comment thread of the GitHub issue. All contributors are advised to report on their effort on the mailing list or on the GitHub issue as soon as they start working on a task in order to let everyone know. As much as possible we avoid doing work that don't get exposed through one or both of these mechanisms.</p> <p>In general, you won't step on any toes though -- multiple people doing the same thing can still be helpful as different individuals bring different perspectives on tasks to the table.</p>"},{"location":"faq/#do-you-all-ever-meet-up-somewhere-physically","title":"Do you all ever meet up somewhere physically?","text":"<p>Subsets of us meet frequently, and there have been two meetings of the core OpenWorm team, one in Paris in July 2014, and a second in London in Fall of 2014.  We use Google+ hangout to meet face to face on a regular basis in general meetings and in standing meetings of the subprojects.</p>"},{"location":"faq/#openworm-simulation-and-modeling","title":"OpenWorm simulation and modeling","text":""},{"location":"faq/#what-is-the-level-of-granularity-of-these-models-ie-cells-subcellular-etc-and-how-does-that-play-out-in-terms-of-computational-requirements","title":"What is the level of granularity of these models (ie. cells, subcellular, etc.), and how does that play out in terms of computational requirements?","text":"<p>In order to make this work we have to make use of abstraction in the computer science sense, so something that is less complex today can be swapped in for something more complex tomorrow. This is inherent in the design of the simulation engine we are building</p> <p>Right now our model of the electrical activity neurons is based on the Hodgkin Huxley equations. The muscles and the physical body of the worm are governed by an algorithm known as \"smoothed particle hydrodynamics.\" So our initial complexity estimates are based on asking how much CPU horsepower do we need for these algorithms.</p>"},{"location":"faq/#whats-the-data-source-for-your-computer-simulation-of-the-living-worm","title":"What's the data source for your computer simulation of the living worm?","text":"<p>There is not a single data source for our simulation; in fact one of our unique challenges is coming up with new ways to work out how to integrate multiple data sets together. Here is a list of some of the data sets that we have used so far:</p> <ul> <li>The Virtual Worm (3D atlas of C. elegans anatomy)</li> <li>The C. elegans connectome (wiring diagram of neurons)</li> <li>Cell list of C. elegans</li> <li>Ion channels used by C. elegans</li> <li>Database of Worm behavioral phenotypes</li> </ul>"},{"location":"faq/#has-there-been-previous-modeling-work-on-various-subsystems-illustrating-what-level-of-simulation-is-necessary-to-produce-observed-behaviors","title":"Has there been previous modeling work on various subsystems illustrating what level of simulation is necessary to produce observed behaviors?","text":"<p>There have been other modeling efforts in C. elegans and their subsystems, as well as in academic journal articles. However, the question of \"what level of simulation is necessary\" to produce observe behaviors is still an open question.</p>"},{"location":"faq/#how-are-neurons-simulated-today","title":"How are neurons simulated today?","text":"<p>There are a number of neuronal simulators in use, and we have done considerable amount of work on top of one in particular, the NEURON simulation environment.</p> <p>There are a wide variety of ways to simulate neurons, as shown in figure two of Izhikevich 2004.</p>"},{"location":"faq/#what-does-a-neuronal-simulator-do","title":"What does a neuronal simulator do?","text":"<p>It calculates a system of equations to produce a read out of the changing membrane potential of a neuron over time. Some simulators enable ion channel dynamics to be included and enable neurons to be described in detail in space (multi-compartmental models), while others ignore ion channels and treat neurons as points connected directly to other neurons. In OpenWorm, we focus on multi-compartmental neuron models with ion channels.</p>"},{"location":"faq/#what-is-the-connection-between-the-basic-proporties-of-c-elegans-neurons-and-human-neurons","title":"What is the connection between the basic proporties of C. elegans neurons and human neurons?","text":"<p>C.elegans neurons do not spike (i.e. have action potentials), which makes them different from human neurons. However, the same mathematics that describe the action potential (known as the Hodgkin-Huxley model) also describe the dynamics of neurons that do not exhibit action potentials. The biophysics of the neurons from either species are still similar in that they both have chemical synapses, both have excitable cell membranes, and both use voltage sensitive ion channels to modify the electrical potential across their cell membranes.</p>"},{"location":"faq/#what-is-the-level-of-detail-of-the-wiring-diagram-for-the-non-neuron-elements","title":"What is the level of detail of the wiring diagram for the non-neuron elements?","text":"<p>There is a map between motor neurons and muscle cells in the published wiring diagram. There isn't much of a wiring diagram that touches other cell types beyond that. There is an anatomical atlas for where they are located. And you can work out the influence between cells based on molecular signals (known as peptides).</p>"},{"location":"faq/#how-much-new-electrophysiological-data-will-the-project-need-to-achieve-its-goals","title":"How much new electrophysiological data will the project need to achieve its goals?","text":"<p>We are hoping that we get neuron by neuron fast calcium imaging of a lot of neurons.</p>"},{"location":"faq/#how-will-the-parameters-of-the-neurons-be-inferred-from-calcium-imaging","title":"How will the parameters of the neurons be inferred from calcium imaging?","text":"<p>Basically we will use model optimization / genetic algorithms to search the parameter space for parameters that are unknown.</p>"},{"location":"faq/#what-are-you-using-genetic-algorithms-in-openworm-for","title":"What are you using genetic algorithms in OpenWorm for?","text":"<p>Because there are a lot of unknowns in the model, we use genetic algorithms (or more generally model optimization techniques) to help us generate many of possible models to match experimental data and then pick the ones most likely to be correct. Here's a paper that describes a process like this.</p>"},{"location":"faq/#what-will-the-fitness-function-be","title":"What will the fitness function be?","text":"<p>Here are some examples</p>"},{"location":"faq/#how-do-you-plan-to-extend-its-methods-from-single-neurons-to-multiple-neurons","title":"How do you plan to extend its methods from single neurons to multiple neurons?","text":"<p>This project is all about biting off small workable pieces of the problem. The plan there is to chain this method. We are starting from a muscle cell whose example electrophysiology we have. Then we will approximate the six motor neurons synapsing onto it based on what we know about its ion channels and whatever more we can gather based on calcium imaging.Then we will be exploring how to tune the combined system of the single muscle cell with the 6 motor neurons connected to it as a network and radiate outwards from there.</p>"},{"location":"faq/#do-you-need-a-connectome-for-these-gap-junctions-as-well-or-should-an-accurate-enough-cell-model-suffice","title":"Do you need a connectome for these gap junctions as well or should an accurate enough cell model suffice?","text":"<p>The gap junctions are included in the C. elegans connectome.</p>"},{"location":"faq/#whats-the-main-differences-between-the-single-and-multi-compartment-models","title":"What's the main differences between the single and multi-compartment models?","text":"<p>Single compartment models lack sufficient detail to capture the detailed shape of the neuron or muscle, which has been shown to influence the dynamics of the cell as a whole. Basically, only multi-compartment models get close enough to be comparable to real biology.</p>"},{"location":"faq/#what-is-neuroml-and-what-does-it-represent","title":"What is NeuroML and what does it represent?","text":"<p>An introduction to NeuroML is available on their website. In short, it is an XML based description of biological descriptions of neurons.</p>"},{"location":"faq/#how-is-excitation-and-inhibition-in-neurons-handled-in-openworm","title":"How is excitation and inhibition in neurons handled in OpenWorm?","text":"<p>Inhibition and excitation will be handled via synapses. Different neurotransmitters and receptors are encoded in our model of the nervous system. Some of those include Glutamate \"excitatory\" and GABA \"inhibitory.\" We have encoded information about the neurons in the OpenWorm NeuroML spatial connectome</p>"},{"location":"faq/#how-do-i-run-the-neuroml-connectome","title":"How do I run the NeuroML connectome?","text":"<p>Get the connectome NeuroML project that contains it and load it up in NeuroConstruct. Install the NEURON simulation environment and set the path to NEURON's bin directory containing nrniv within neuroConstruct's menu (Settings-&gt;General Preferences and Project Defaults). After generating cell positions (easiest to do this with the PharyngealNeurons_inputs configuration), go to the export tab, the NEURON subtab, and press 'create hoc simulation'. Once this is completed the button will stop being greyed out and the 'Run simulation' button will be available. Clicking this should kick off the simulation run. Once this is completed, the output from the simulation should tell you that results are available in a directory named 'Sim_XX' where XX will be a number. Go back to the Visualisation tab and click 'View Prev Sims in 3D...\" Click on the box with the 'Sim_XX' name that applies to the simulation run you did and press 'Load Simulation' at the bottom. Then at the bottom of the Visualisation screen click 'Replay' and the 'Replay simulation'. For PharyngealNeurons_inputs, the color changes will be subtle, but they will be happening.</p>"},{"location":"faq/#i-generated-positions-for-the-connectome-in-neuroconstruct-and-tried-to-export-to-neuron-but-it-said-neuron-was-not-found","title":"I generated positions for the connectome in NeuroConstruct and tried to export to NEURON but it said NEURON was not found!","text":"<p>Double check that you have set the path to NEURON's bin directory containing nrniv within neuroConstruct's menu (Settings-&gt;General Preferences and Project Defaults). Just pointing to the root where the bin directory is located will NOT work.</p>"},{"location":"faq/#how-does-the-nemaload-project-relate-to-openworm","title":"How does the NemaLoad project relate to OpenWorm?","text":"<p>We both want to see the C. elegans reverse engineered as a means of understanding nervous systems. We've met a few times and David Darlymple contributes to the project and on the mailing list. We have a different approach right now, but they are complementary and could be unified down the road. Both projects have a lot of up front development work that we are doing now, us mainly in software and integrating data that already exists and David in building an ambitious experimental set up to collect a never-before-gathered data set.</p>"},{"location":"faq/#what-is-sph","title":"What is SPH?","text":"<p>Smoothed Particle Hydrodynamics. More information is available online.</p>"},{"location":"faq/#what-are-you-doing-with-sph","title":"What are you doing with SPH?","text":"<p>We are building the body of the worm using particles that are being driven by SPH. This allows for physical interactions between the body of the worm and its environment.</p>"},{"location":"faq/#openworm-code-reuse","title":"OpenWorm code reuse","text":""},{"location":"faq/#what-are-lems-and-jlems","title":"What are LEMS and jLEMS?","text":"<p>LEMS (Low Entropy Model Specification) is a compact model specification that allows definition of mathematical models in a transparent machine readable way. NeuroML 2.0 is built on top of LEMS and defines component types useful for describing neural systems (e.g. ion channels, synapses). jLEMS is the Java library that reads, validates, and provides basic solving for LEMS. A utility, jNeuroML, has been created which bundles jLEMS, and allows any LEMS or NeuroML 2 model to be executed, can validate NeuroML 2 files, and convert LEMS/NeuroML 2 models to multiple simulator languages (e.g. NEURON, Brian) and to other formats.</p>"},{"location":"faq/#what-is-osgi-and-how-is-it-being-used","title":"What is OSGi and how is it being used?","text":"<p>OSGi is a code framework that is at the heart of Geppetto. One of the basic underpinnings of object-oriented programming is that code modules should have low coupling-- meaning that code in one part of your program and code in another part of your program should minimize calling each other. Object oriented languages like Java help to enable programs to have low coupling at compile time, but it has been recognized that in order to have true modularity, the idea of low coupling needed to be extended through to run-time. OSGi is a code framework in Java that does this. With OSGi, code modules can be turned on and off at run-time without need for recompile. This provides for an extremely flexible code base that enables individual modules to be written with minimal concern about the rest of the code base.</p> <p>This matters for OpenWorm as we anticipate many interacting modules that calculate different biological aspects of the worm. So here, each algorithm like Hodgkin Huxley or SPH can be put into an OSGi bundle in the same way that future algorithms will be incorporated. Down the road, this makes it far more likely for others to write their own plugin modules that run within Geppetto.</p>"},{"location":"faq/#what-is-spring-and-how-is-it-being-used","title":"What is Spring and how is it being used?","text":"<p>Spring is a code framework being used at the heart of Geppetto. It enables something called 'dependency injection', which allows code libraries that Geppetto references to be absent at compile time and called dynamically during run-time. It is a neat trick that allows modern code bases to require fewer code changes as the libraries it depends on evolves and changes. It is important for Geppetto because as it increasingly relies on more external code libraries, managing the dependencies on these needs to be as simple as possible.</p>"},{"location":"faq/#what-is-tomcat-and-how-is-it-being-used","title":"What is Tomcat and how is it being used?","text":"<p>Tomcat is a modern web server that enables Java applications to receive and respond to requests from web browsers via HTTP, and Geppetto runs on top of this. It has no OSGi functionality built into it by itself, that's what Virgo adds.</p> <p>Geppetto implements OSGi via a Virgo server which itself runs on top of Tomcat. It is a little confusing, but the upshot is that Geppetto avoids having to build components like a web server and focus only on writing code for simulations.</p>"},{"location":"faq/#what-is-virgo-and-how-is-it-being-used","title":"What is Virgo and how is it being used?","text":"<p>Virgo is a web server that wraps Tomcat and uses OSGi as its core framework, and Geppetto runs on top of this. On top of the code modularity framework that OSGi provides, Virgo adds the ability to receive and respond to requests from web browsers via HTTP. It is important for Geppetto because it is a web-based application.</p>"},{"location":"faq/#what-is-maven-and-how-is-it-being-used","title":"What is Maven and how is it being used?","text":"<p>Maven is a dependency management and automated build system for Java that is used by Geppetto to keep track of all the libraries it uses. If you are familiar with Make files, Maven provides a more modern equivalent in the form of a project object model file, or pom.xml. Whereas Spring is a library that appears in source code, Maven operates external to a code base, defining how code will get built and what libraries will be used. Maven enables external code libraries to be downloaded from the internet upon run time, which helps to avoid the bad programming practice of checking all your libraries into version control repositories.</p> <p>It is important for OpenWorm because as Geppetto increasingly relies on other code libraries, we need easy ways to manage this.</p>"},{"location":"faq/#openworm-links-and-resources","title":"OpenWorm links and resources","text":""},{"location":"faq/#do-you-have-a-website","title":"Do you have a website?","text":"<p>http://openworm.org</p>"},{"location":"faq/#where-can-i-send-my-inquiries-about-the-project","title":"Where can I send my inquiries about the project?","text":"<p>info@openworm.org</p>"},{"location":"faq/#where-can-i-find-the-worm-browser","title":"Where can I find the \"worm browser\"?","text":"<p>http://browser.openworm.org</p>"},{"location":"faq/#how-do-i-join-the-public-mailing-list","title":"How do I join the public mailing list?","text":"<p>More info here: http://www.openworm.org/contacts.html</p>"},{"location":"faq/#where-are-downloads-located","title":"Where are downloads located?","text":"<p>http://www.openworm.org/downloads.html</p>"},{"location":"fullhistory/","title":"A History and Pre-History of OpenWorm","text":"<p>What follows is a history of C. elegans research, of the OpenWorm Project, as well as of several similar projects.</p>"},{"location":"fullhistory/#historical-milestones","title":"Historical Milestones","text":"<p>1900: C. elegans was first described by \u00c9mile Maupas, who isolated it from soil in Algeria.</p> <p>1963: Sydney Brenner, at MRC Laboratory in Cambridge, proposed using C. elegans as a model organism for scientific study. He won a Nobel prize for this work in 2002.</p> <p>1986: After thirteen years of work, John White, also at MRC Laboratory in Cambridge, publishes the full C. elegans connectome.</p> <p>1999: C. elegans becomes the first animal to have its genome completely sequenced. Humans follow in 2002.</p> <p>1999: Ferree and Lockery publish a neural network model of chemotaxis in C. elegans</p> <p>2000: WormBase is founded by Paul Sternberg of CalTech and Richard Durbin, among others. It aggregates information known about C. elegans into one place.</p> <p>2002: David Harel proposes complete modeling of the C. elegans as a grand challenge in computing.</p> <p>2009: Boyle &amp; Cohen publish an integrated 2D computer model of C. elegans locomotion</p> <p>18 May 2014: A team from MIT develops a technique to view all C. elegans neurons at once, which may fill in a remaining data gap.</p>"},{"location":"fullhistory/#openworm","title":"OpenWorm","text":"<p>Fall of 2007: Andrey Palyanov starts the CyberElegans project.</p> <p>~2007: Co-founders Giovanni Idili and Matteo Cantarelli (software engineers) have conversations about simulating the worm, but nothing comes of it at the time as they lack computational biology / neuroscience background.</p> <p>June 2008: First CyberElegans publication: Palyanov A.Yu., Dibert A.A., Computer simulation of C. elegans muscular system and neural network // In: Proc. 6-th Int. Conf. Bioinformatics of Genome Regulation and Structure (BGRS), June 22-28, 2008, p. 61.</p> <p>~2009: Andrey Palyanov posts the first CyberElegans video to youtube: https://www.youtube.com/watch?v=Ek49JSAiKjY</p> <p>Jan 2010: Sergey Khayrulin joins Andrey on the CyberElegans project.</p> <p>1 Jan 2010: In the tweet heard 'round the world, co-founder Giovanni Idili proposes what would later be called the OpenWorm project to co-founder Stephen Larson (PhD student at UCSD) at the Whole Brain Catalog:</p> <p>@BrainCatalog new year's resolution: simulate the whole C. elegans brain (302 neurons)!</p>\u2014 Giovanni Idili (@John_Idol) January 1, 2010 <p>Nice! RT @John_Idol: @BrainCatalog new year's resolution: simulate the whole C. elegans brain (302 neurons)!</p>\u2014 Whole Brain Catalog (@BrainCatalog) January 1, 2010 <p>3 August 2010: In a five-minute speech, Stephen Larson pitches the idea for simulating C. elegans at Ignite San Diego. </p> <p>Early Jan 2011: Stephen Larson puts out a call for volunteers through Whole Brain Catalog, originally oriented at finding contributors for the WBC platform. Giovanni replies to the call restating his goal of C. elegans simulation, and brings Matteo into the conversation. The 3 get together on a skype call and decide to start a project together, during this conversation Stephen proposes the name \"OpenWorm\" and the name sticks. Subsequent early days conversations include Timothy Busbice (who also replied to Stephen's call for volunteers and co-founded OpenWorm), Marius Buibas (UCSD at the time) and Jay Coggan (Salk Institute).</p> <p>24 Jan 2011: Giovanni discovers CyberElegans, developed by Andrey Palyanov and Sergey Khayrulin (from AP Ershov Institute of Informatics, Russia) who are contacted and immediately agree to join forces with the OpenWorm team:</p> <p>WOW, this C. elegans simulation looks pretty impressive --&gt; http://goo.gl/SS96B cc: @BrainCatalog, @tarelli</p>\u2014 Giovanni Idili (@John_Idol) January 24, 2011 <p>4 September 2011: Article: Managing Complexity in Multi-Algorithm, Multi-Scale Biological Simulations: An Integrated Software Engineering and Neuroinformatics Approach.</p> <p>September 2011: OpenWorm Release 1</p> <p>December 2011: OpenWorm's Blog is initiated</p> <p>April 2012: OpenWorm Release 2</p> <p>August 2012: Article: Towards a virtual C. elegans: A framework for simulation and visualization of the neuromuscular system in a 3D physical environment.</p> <p>November 2012: OpenWorm Release 3</p> <p>21 March 2013: OpenWorm Journal Club with John White, the \"father of the connectome\".</p> <p>July 2013:</p> <ul> <li>First OpenWorm Conference, in Paris.</li> <li>Article: Integration of predictive-corrective incompressible SPH and Hodgkin-Huxley based models in the OpenWorm in silico model of C. elegans.</li> <li>Article: Beyond the connectome hairball: Rational visualizations and analysis of the C. elegans connectome as a network graph using hive plots.</li> <li>OpenWorm Release 4</li> </ul> <p>January 2014: OpenWorm Release 5</p> <p>19 May 2014: OpenWorm raises 121,000 USD via Kickstarter</p> <p>24 May 2014: OpenWorm article in The Economist</p> <p>Summer 2014: Two OpenWorm volunteers are sponsored by the Google Summer of Code program via the INCF.</p> <p>3 November 2014: Article: OpenWorm: an open-science approach to modeling Caenorhabditis elegans</p> <p>4-6 November 2014: Second OpenWorm Conference, in London, UK.</p> <p>April 2015: Amazon Web Services donates credits to the OpenWorm project.</p> <p>Summer 2015: One OpenWorm volunteer is sponsored by the Google Summer of Code program via the INCF.</p> <p>18 July 2015: Article: The OpenWorm Project: currently available resources and future plans</p> <p>8 March 2016: Article: Application of smoothed particle hydrodynamics to modeling mechanisms of biological tissue</p> <p>18 August 2016: Article: Quantifying Mosaic Development: Towards an Evo-Devo Postmodern Synthesis of the Evolution of Development Via Differentiation Trees of Embryos</p> <p>10 August 2016: Article: Unit Testing, Model Validation, and Biological Simulation</p> <p>29-30 January 2018: Royal Society Discussion meeting: Connectome to behaviour: modelling C. elegans at cellular resolution. Meeting report. </p> <p>September 2018: A number of publications from the OpenWorm community following on from the Royal Society Discussion meeting mentioned above:</p> <ul> <li>Article: Three-dimensional simulation of the Caenorhabditis elegans body and muscle cells in liquid and gel environments for behavioural analysis.</li> <li>Article: c302: a multiscale framework for modelling the nervous system of Caenorhabditis elegans.</li> <li>Article: Geppetto: a reusable modular open platform for exploring neuroscience data and models.</li> <li>Article: Towards systematic, data-driven validation of a collaborative, multi-scale model of Caenorhabditis elegans.</li> <li>Article: OpenWorm: overview and recent advances in integrative biological simulation of Caenorhabditis elegans.</li> </ul> <p>November 2018: Article: Cell differentiation processes as spatial networks: Identifying four-dimensional structure in embryogenesis, Article: The Emergent Connectome in Caenorhabditis elegans Embryogenesis.</p> <p>15 September 2020: Article: Raising the Connectome: the emergence of neuronal activity and behavior in C. elegans</p> <p>22 December 2020: Article: Data-theoretical Synthesis of the Early Developmental Process</p> <p>6 January 2021: Article: Periodicity in the Embryo: emergence of order in space, diffusion of order in time</p> <p>September 2022: OpenWorm Newsletter 1: DevoWorm hosted four Google Summer of Code students; electrophysiological recordings from individual neurons; NeuroPAL developed a new technique to create a genetic strain of the worm; OpenWorm studentships completed their first successful projects. </p> <p>June 2023: OpenWorm Newsletter 2: DevoWorm sponsored two more students through the Google Summer of Code; 2D worm body model visualisations were created to aid the 3D Sibernetic models; an interactive tutorial for the Hodgkin Huxley model was developed; OpenWorm presented at the main C. elegans scientific conference in Glasgow.</p> <p>May 2024: OpenWorm Newsletter 3: DevoWorm celebrated its 10th anniversary; new cell and ion channel models were developed in NeuroML; the OpenWorm Docker simulation stack was updated; OpenWorm was interviewed on the Data Skeptic podcast.  </p>"},{"location":"fullhistory/#projects-similar-to-openworm","title":"Projects similar to OpenWorm","text":"<p>Detailed spreadsheet of these models and their attributes. </p> <p>~1997: NemaSys at University of Oregon A full model was planned, including body, every neuron, every synapse, and complete set of sensory modalities. Four papers were released in 1997-1998 on pieces of the model, but its ultimate ambition was not finished. Webpage link</p> <p>~1998 Perfect C. elegans Project in Tokyo They released an initial report, but no more.</p> <p>~2004 Virtual C. elegans project at Hiroshima University, Japan The aim was to build a worm emulation, simulate poking it on the head, and have it back away from the poke. This was achieved, but not in a biologically realistic way. They simulated the nematode neurons, but the connection weights were unknown. Instead of getting this information experimentally, a machine learning algorithm was used to generate weights. Papers:</p> <ul> <li>A Dynamic Body Model of C. elegans with Neural Oscillators</li> <li>A Model of Motor Control of C. elegans with Neuronal Circuits</li> </ul> <p>2009 Jordan Boyle, Netta Cohen at University of Leeds, UK C. elegans locomotion: an integrated approach</p> <p>2010 Mailler at Tulsa, USA A Biologically Accurate 3D Model of the Locomotion of Caenorhabditis Elegans.</p> <p>September 2011 - October 2013 Project Nemaload (David Dalrymple). The aim was to use optogenetics to record the firing dynamics of the C. elegans neurons and then replicate it in a simulation. He delivered a lecture on the project in November 2011. As of June 2014 he works for Twitter so the project may now be defunct.</p>"},{"location":"fullhistory/#acknowledgements","title":"Acknowledgements","text":"<p>Credit to James Pearn of Artificial Brains for contributions to the early OpenWorm history.</p>"},{"location":"modeling/","title":"OpenWorm Modeling Approach","text":"<p>Our main goal is to build the world's first virtual organism-- an in silico implementation of a living creature-- for the purpose of achieving an understanding of the events and mechanisms of living cells. Our secondary goal is to enable, via simulation, unprecedented in silico experiments of living cells to power the next generation of advanced systems biology analysis, synthetic biology, computational drug discovery and dynamic disease modeling.</p> <p>In order to achieve these goals, we first began with an informal cartoon representation of a breakdown of cell types and various biological processes that the worm has. Here is a representation of a small subset of those processes, where arrows show the causal relationship between processes and cell types:</p> <p></p> <p>This picture is purposefully drawn with an underlying loop of causal relationships, and is partially inspired by the work of Robert Rosen. The decision to focus on any one loop is arbitrary. Many different loops of causal relationships could be plucked out of the processes that underly the worm. However, focusing on first dealing with the loop that deals with behavior in the environment and through the nervous system has several advantages as a starting point:</p> <ul> <li>Crawling behavior of worms is relatively easy to measure</li> <li>The 302 neurons responsible for the behavior are well mapped</li> <li>Enables the study of the nervous system as a real time control system for a body</li> <li>Provides the model with a minimum core to which other biological processes and cell types can be added.</li> </ul> <p>Having chosen one loop to focus on first, we can now re-define the problem as how to construct an acceptable neuromechanical model. There have been other attempts to do this in the past and there are some groups currently working on the problem using different approaches (e.g. Cohen, Lockery, Si Elegans).</p> <p>Our approach involves building a 3D mechanical model of the worm body and nervous system, tuning the model using model optimization techniques, validating the model using real data, and ensuring the model is reproducible by other labs by exposing it through a web-based simulation engine.</p>"},{"location":"modeling/#closing-the-loop-with-neuromechanical-modeling","title":"Closing the loop with neuromechanical modeling","text":"<p>While our ultimate goal is to simulate every cell in the C. elegans, we are starting out by building a model of its body and environment, its nervous system, and its muscle cells.</p> <p>To get a quick idea of what this looks like, check out the CyberElegans prototype. In this movie you can see a simulated 3D C. elegans being activated in an environment. Similar to the CyberElegans model, its muscles are located around the outside of its body, and as they turn red, they are exerting forces on the body that cause the bending to happen.</p> <p>These steps are outlined in blue text of the figure below:</p> <p></p> <p>Our end goal for the first version is to complete the entire loop. We believe that this is the most meaningful place to begin because it enables us to study the relationship between a nervous system, the body it is controlling, and the environment that body has to navigate. We also believe this is a novel development because there are no existing computational models of any nervous systems that complete this loop. For an excellent review of the current state of research on this topic, check out Cohen &amp; Sanders, 2014</p> <p>When we first started, our team in Novosibirsk had produced an awesome prototype. We recently published an article about it. If you watch the movie that goes along with the prototype, you can see the basic components of the loop above in action:</p> <p></p> <p>Here muscle cells cause the motion of the body of the worm along the surface of its environment.</p> <p></p> <p>Inside the worm, motor neurons are responsible for activating the muscles, which then makes the worms move. The blue portions of the loop diagram above are those aspects that are covered by the initial prototype. We are now in the process of both adding in the missing portions of the loop, as well as making the existing portions more biologically realistic, and making the software platform they are operating on more scalable.</p>"},{"location":"modeling/#components","title":"Components","text":"<p>In order to accomplish this vision, we have to describe the different pieces of the loop separately in order to understand how to model them effectively. This consists of modeling the body within an environment, the neurons, and the muscle cells.</p>"},{"location":"modeling/#body-and-environment","title":"Body and environment","text":"<p>One of the aspects of making the model more biologically realistic has been to incorporate a 3d model of the anatomy of the worm into the simulation.</p> <p>To get a quick idea of what this looks like, check out the latest movie. In this movie you can see a simulated 3D C. elegans being activated in an environment. Its muscles are located around the outside of its body, and as they turn red, they are exerting forces on the body that cause the bending to happen.</p> <p>In turn, the activity of the muscles are being driven by the activity of neurons within the body.</p> <p></p> <p>More detailed information is available on the Sibernetic project page.</p> <p>Having a virtual body now allows us to try out many different ways to control it using signals that could arise from neurons. Separately, we have been doing work to create a realistic model of the worm's neurons.</p>"},{"location":"modeling/#neurons","title":"Neurons","text":"<p>This is a much more faithful representation of the neurons and their positions within the worm's body.</p> <p>Our computational strategy to model the nervous system involves first reusing the C. elegans connectome and the 3D anatomical map of the C. elegans nervous system and body plan. We have used the NeuroML standard (Gleeson et al., 2010) to describe the 3D anatomical map of the C. elegans nervous system. This has been done by discretizing each neuron into multiple compartments, while preserving its three-dimensional position and structure. We have then defined the connections between the NeuroML neurons using the C. elegans connectome. Because NeuroML has a well-defined mapping into a system of Hodgkin-Huxley equations, it is currently possible to import the \u201cspatial connectome\u201d into the NEURON simulator (Hines &amp; Carnevale 1997) to perform in silico experiments.</p> <p>To start getting some practical experience playing with dynamics that come from the connectome, we have simplified it into a project called the 'connectome engine' and integrated its dynamics into a Lego Mindstorms EV3 robot. You can see a movie of this in action.</p> <p>More information about working with the data within it and other data entities can be found on the data representation project page.</p> <p>These neurons must eventually send signals to muscle cells.</p>"},{"location":"modeling/#muscle-cells","title":"Muscle cells","text":"<p>We have started our process of modeling muscle cells by choosing a specific muscle cell to target:</p> <p></p> <p>More information about working with the data within it and other data entities can be found on the data representation project page.</p> <p>Once the body, neurons, and muscles are represented, we still have a lot of free parameters that we don't know. That's what leads us to the need to tune the model.</p>"},{"location":"modeling/#tuning","title":"Tuning","text":"<p>The way we make the model biophysically realistic is to use sophisticated mathematics to drive the simulation that keep it more closely tied to real biology. This is important because we want the model to be able to inform real biological experiments and more coarse-grained, simplified mathematics falls short in many cases.</p> <p>Specifically for this loop, we have found that two systems of equations will cover both aspects of the loop, broadly speaking:</p> <p></p> <p>As you can see, where the two sets of equations overlap is with the activation of muscle cells. As a result, we have taken steps to use the muscle cell as a pilot of our more biologically realistic modeling, as well as our software integration of different set of equations assembled into an algorithmic \"solver\".</p> <p>These two algorithms, Hodgkin-Huxley and SPH, require parameters to be set in order for them to function properly, and therefore create some \u201cknown unknows\u201d or \u201cfree parameters\u201d we must define in order for the algorithm to function at all. For Hodgkin-Huxley we must define the ion channel species and set their conductance parameters. For SPH, we must define mass and the forces that one set of particles exert on another, which in turn means defining the mass of muscles and how much they pull. The conventional wisdom on modeling is to minimize the number of free parameters as much as possible, but we know there will be a vast parameter space associated with the model.</p> <p>To deal with the space of free parameters, two strategies are employed. First, by using parameters that are based on actual physical processes, many different means can be used to provide sensible estimates. For example, we can estimate the volume and mass of a muscle cell based on figures that have been created in the scientific literature that show its basic dimensions, and some educated guesses about the weight of muscle tissue. Secondly, to go beyond educated estimates into more detailed measurements, we can employ model optimization techniques. Briefly stated, these computational techniques enable a rational way to generate multiple models with differing parameters and choose those sets of parameters that best pass a series of tests. For example, the conductances of motor neurons can be set by what keeps the activity those neurons within the boundaries of an appropriate dynamic range, given calcium trace recordings data of those neurons as constraints.</p> <p>If you'd be interested to help with tuning the model, please check out the Optimization project page.</p>"},{"location":"modeling/#validation","title":"Validation","text":"<p>In order to know that we are making meaningful scientific progress, we need to validate the model using information from real worms. The movement validation project is working with an existing database of worm movement to make the critical comparisons.</p> <p>The main goal of the Movement Validation team is to finish a test pipeline so the OpenWorm project can run a behavioural phenotyping of its virtual worm, using the same statistical tests the Schafer lab used on their real worm data.</p> <p>More detailed information is available on the movement validation project page.</p>"},{"location":"modeling/#reproducibility","title":"Reproducibility","text":"<p>In order to allow the world to play with the model easily, we are engineering Geppetto, an open-source modular platform to enable multi-scale and multi-algorithm interactive simulation of biological systems. Geppetto features a built-in WebGL visualizer that offers out-of-the-box visualization of simulated models right in the browser. You can read about architectural concepts and learn more about the different plug-in bundles we are working on.</p> <p></p> <p>The project page for Geppetto has information about getting involved in its development with OpenWorm.</p>"},{"location":"projects/","title":"Projects Overview","text":""},{"location":"projects/#openworm-projects","title":"OpenWorm Projects","text":"<p>The OpenWorm project is currently laid out into the major areas shown below:</p>"},{"location":"projects/#currently-active-projects","title":"Currently active projects","text":"<ul> <li>Neuromechanical modeling with Sibernetic</li> <li>c302 multiscale modelling framework</li> <li>OpenWorm Browser</li> <li>DevoWorm project</li> <li>Docker simulation stack</li> <li>Community outreach</li> </ul>"},{"location":"projects/#projects-still-maintained-less-active","title":"Projects still maintained, less active","text":"<ul> <li>Data collection and representation</li> <li>Movement analysis</li> <li>Geppetto Simulation Engine</li> <li>Optimization engine</li> <li>Muscle-Neuron integration</li> <li>C. elegans robots</li> </ul> <p>NeuroMechanical Modeling - Sibernetic</p> <p>While our ultimate goal is to simulate every cell in C. elegans, we are starting out by building a model of its body, its nervous system, and its environment. Sibernetic is the home of the C++ code base that implements the core of the model. We have implemented an algorithm called Smoothed Particle Hydrodynamics (SPH) to simulate the body of the worm and its environment using GPUs. This algorithm has been initially worked out in C++ (with OpenGL visualization).</p> <p>To get a quick idea of what this looks like, check out the latest movie. In this movie you can see a simulated 3D C. elegans being activated in an environment. Its muscles are located around the outside of its body, and as they contract, they exert forces on the surrounding fluid, propelling the body forward via undulutory thrust. In this model, the neural system is not considered and patterns of muscle contraction are explicitly defined.</p> <p>More detailed information is available on the Sibernetic project page.</p> <p>Geppetto Simulation Engine</p> <p>In order to allow the world to play with the model easily, we are engineering Geppetto, an open-source modular platform to enable multi-scale and multi-algorithm interactive simulation of biological systems. Geppetto features a built-in WebGL visualizer that offers out-of-the-box visualization of simulated models right in the browser. You can read about architectural concepts and learn more about the different plug-in bundles we are working on.</p> <p>More detailed information is available on the Geppetto project page.</p> <p>Movement analysis</p> <p>In order to know that we are making meaningful scientific progress, we need to validate the model using information from real worms. The movement validation project is working with an existing database of worm movement to make the critical comparisons.</p> <p>The Movement Analysis Team maintains the test pipeline so the OpenWorm project can run a behavioural phenotyping of its virtual worm.</p> <p>More detailed information is available on the Movement analysis project page.</p> <p>Optimization engine</p> <p>The Optimization engine uses optimization techniques like genetic algorithms to help fill gaps in our knowledge of the electrophysiology of C. elegans muscle cells and neurons.</p> <p>More detailed information is available on the Optimization project page.</p> <p>Data Collection and Representation</p> <p>A lot of data about C. elegans is integrated into the model. In this project, we work on what forms we should put these data in to best leverage them for building the model.</p> <p>More detailed information is available on the Data representation project page.</p> <p>Community Outreach</p> <p>The effort to build the OpenWorm open science community is always ongoing.</p> <p>More detailed information is available on the Community project page.</p> <p>Muscle-Neuron Integration</p> <p>The goal of this project is to underpin our muscle and neuron models with biological data. This will be accomplished by creating biologically-realistic ion channel models from experimental data, which will then give rise to neural dynamics.</p> <p>More detailed information is available on the Muscle-Neuron integration project page.</p> <p>C. elegans robot</p> <p>The goal of this project is twofold: 1. To build a robot that simulates sensory-motor functions of a C. elegans nematode worm, including foraging for food. 2. To specify parts and instructions that will help anyone to build the robot.</p> <p>More detailed information is available on the C. elegans robot project page.</p>"},{"location":"releases/","title":"Current releases","text":"<p>The recent and planned releases for the Docker image which contains the assembled OpenWorm software stack can be found at the OpenWorm Milestones.</p>"},{"location":"releases/#past-releases","title":"Past Releases","text":""},{"location":"releases/#release-567-2nd-half-of-2013-1st-half-of-2014-2nd-half-of-2014","title":"Release 5,6,7 (2nd Half of 2013, 1st half of 2014, 2nd half of 2014)","text":"<p>These releases have yet to be fully documented, as the project has transitioned from a small group-only run project into a much larger volunteer-based organization.</p> <p>Some key milestones that were reached:</p> <p>Release 7</p> <ul> <li>First OpenWorm Paper published</li> <li>Donation of Brown Lab worm movement data</li> <li>Successful shipments of physical rewards to Kickstarter backers</li> </ul> <p>Release 6</p> <ul> <li>First version of PyOpenWorm released</li> <li>Successful Kickstarter campaign</li> </ul> <p>Release 5</p> <ul> <li>Movement validation team formed</li> <li>Donation of code to reproduce movement validation</li> </ul>"},{"location":"releases/#release-4-1st-half-of-2013-january-july-2013","title":"Release 4 (1st Half of 2013) January - July 2013","text":"<ul> <li>OpenWorm website update - milestone<ul> <li>completely renewed version of the website using bootstrap</li> </ul> </li> <li>Tuning neurons based on real worm recordings - milestone<ul> <li>plotted some calcium traces from Leifer's lab</li> </ul> </li> <li>Ion Channel and Neuropeptide database - milestone<ul> <li>Defined known neuropeptides for each neuron</li> </ul> </li> <li>Data visualization experiments - milestone<ul> <li>hive plots of connectome - poster at Neuroinformatics 2013</li> <li>D3JS experiments</li> </ul> </li> <li>Submit a perspectives paper on OpenWorm - milestone<ul> <li>drafted and submitted to frontiers - review process ongoing</li> </ul> </li> <li>Synapse position crowdsourcing - milestone</li> <li>C++ Fluid mechanics engine improvements - milestone<ul> <li>independent bundles of contracting elastic matter</li> <li>impermeable surfaces</li> <li>bug fixes on liquid and elastic matter</li> <li>renamed C++ implementation to Sibernetic</li> </ul> </li> <li>Integration of membrane electrophysiology and muscle cell mechanics - milestone<ul> <li>poster at CNS 2013</li> </ul> </li> <li>Geppetto platform: 1st release - milestone / release<ul> <li>basic simulation file XML specification</li> <li>simulation lifecycle and basic interaction<ul> <li>load / start / stop / reset</li> </ul> </li> <li>WebGL frontend visualization<ul> <li>particle systems</li> <li>ball-stick morphologies</li> <li>camera controls: rotation / zoom / panning</li> </ul> </li> <li>Multi-user support<ul> <li>multiple-users can observe the same simulation</li> </ul> </li> <li>Tooling and scripts to facilitate deployment / install etc.</li> </ul> </li> <li>Geppetto plugin: single-compartment neuronal simulator - milestone</li> <li>Geppetto plugin: fluid mechanics solver - milestone<ul> <li>ported C++ version to Java for liquid and elastic matter support</li> <li>porting validation - milestone<ul> <li>unit testing infrastructure to validate codebase</li> </ul> </li> </ul> </li> </ul> <p>Journal clubs Posts Media Coverage</p>"},{"location":"releases/#release-3-completed-may-2012-november-2012","title":"Release 3 (completed) May 2012 - November 2012","text":"<p>This release, among many acheivements, we accomplished the following:</p> <ul> <li>Published a paper</li> <li>Made several presentations</li> <li>Interacted with lots of folks doing community building</li> <li>Got mentioned, pointed to, or referenced in several interesting articles</li> <li>Built and advanced several code products</li> </ul> <p>Detailed release notes from this release can be found online</p> <p>Our second release pointed us in a good direction for the future, and provided some exciting products. In release 3, we worked to develop additional products that are more easily used by the outside world.</p>"},{"location":"releases/#epic-1-as-a-user-i-want-to-be-able-to-mark-synapses-and-have-them-integrated-into-the-model","title":"EPIC-1: As a user, I want to be able to mark synapses and have them integrated into the model","text":"<p>The user will be able to contribute to a shared knowledge space of the positions and identities of C. elegans synapses using an installation of CATMAID. This is important because the C. elegans connectome does not currently incorporate synapse positions at all.</p>"},{"location":"releases/#epic-2-as-a-developer-i-want-to-launch-the-simulation-engine-on-amazon-aws","title":"EPIC-2: As a developer, I want to launch the simulation engine on Amazon AWS","text":"<p>This could be implemented with an auto-configuration system like Fabric that automatically launches AWS instances and runs an installation script on it. This way we can control what OS / drivers are used on the target system.</p>"},{"location":"releases/#epic-3-as-a-user-i-want-to-be-able-to-see-the-body-of-the-worm-moving-and-changing-color-driven-by-activity-of-the-simulation-engine-simplified-worm","title":"EPIC-3: As a user, I want to be able to see the body of the worm moving and changing color, driven by activity of the simulation engine (Simplified Worm)","text":"<p>It is important the outside users can see a visual representation of the simulation engine so that they can get a sense of what is going on with the project.</p>"},{"location":"releases/#epic-4-as-a-user-i-want-to-be-able-to-run-a-simulation-that-includes-muscle-cell-physics-as-well-as-muscle-cell-membrane-excitability","title":"EPIC-4: As a user, I want to be able to run a simulation that includes muscle cell physics as well as muscle cell membrane excitability","text":""},{"location":"releases/#epic-5-as-a-scientist-i-want-a-detailed-written-summary-of-the-physiology-we-intend-to-include-in-the-model","title":"EPIC-5: As a scientist, I want a detailed written summary of the physiology we intend to include in the model","text":"<p>This is a document written as prose that summarizes the physiological data that is known.. This should structure the information that currently exists and show where the gaps of knowledge are.</p> <p>This is important because we want to build cells which are conductance based models. At the moment we don't know all the channels. This allows others to contribute what they know about this.</p>"},{"location":"releases/#epic-6-as-a-user-i-want-to-see-the-optimized-data-matching-the-experimental-results","title":"EPIC-6: As a user, I want to see the optimized data matching the experimental results","text":"<p>This should enable the parameters of the muscle cell to be tuned with respect to real data.</p> <p>EPIC-7: As a user, I want to see a WebGL visualization of Smoothed Particle Hydrodynamics -----------------------------------------------------------------------------------------We want to be able to run the Smoothed Particle Hydrodynamics demos so we can see them through the browser.</p>"},{"location":"releases/#presentation-update","title":"Presentation update","text":""},{"location":"releases/#release-2-completed-october-2011-to-april-2012","title":"Release 2 (completed) October 2011 to April 2012","text":"<p>Our major goal for this release was to integrate the work we have done in release one to do a detailed simulation of a body wall muscle cell, MDL08 (pictured below). While we did not complete all of the epics we set out for ourselves, we made significant progress in all of them, and learned a lot in the process. See the Roadmap for more information on where we are now.</p> <p>This muscle cell receives input from 8 motor neurons:</p> <ul> <li>AS01</li> <li>AS02</li> <li>DA01</li> <li>DA02</li> <li>DB01</li> <li>DD01</li> <li>SMDDL</li> <li>SMDDR</li> </ul> <p>We want to combine the physical simulator, running PCI SPH, that should model the walls of the muscle cell and the force pulling on those walls when the muscle is active, with the cell membrane excitability simulator, (e.g., the Hodgkin Huxley simulator). In order to ensure that our simulation is returning results that match reality, we will tune the significant number of parameters in our simulation using a genetic algorithm.</p>"},{"location":"releases/#component-genetic-algorithm","title":"Component: Genetic Algorithm","text":"<p>EPIC-1 As a user, I want to use a genetic algorithm to fit the parameters of the muscle cell and motor neurons to real data Component: Simulation Engine</p> <p>EPIC-2 As a user, I want to run a model developed in NeuroML on our simulation engine to be able to run NeuroML models on the Amazon cloud</p> <p>EPIC-3 As a user, I want to be able to run a simulation that includes muscle cell physics as well as muscle cell membrane excitability.</p>"},{"location":"releases/#component-worm-browser","title":"Component: Worm Browser","text":"<p>EPIC-4 As a user of the simulation engine, I want a browser-based visualization to show me the muscle cell output</p>"},{"location":"releases/#component-database","title":"Component: Database","text":"<p>EPIC-5 As a model builder, I want the best definition of the muscle cell model and motor neurons</p> <p>EPIC-6 As a model builder, I want to have a target output of the muscle cell.</p>"},{"location":"releases/#component-website","title":"Component: Website","text":"<p>EPIC-7 As a visitor to openworm.org, I want to be impressed with the professionalism of the project and want to contribute</p>"},{"location":"releases/#component-kickstarter","title":"Component: Kickstarter","text":"<p>EPIC-8 As an open worm team member, I want to launch a fundraising campaign to raise money for the project</p>"},{"location":"releases/#release-1-completed-may-2011-september-2011","title":"Release 1 (completed) May 2011 - September 2011","text":"<p>We have set a completed a successful release 1 in September. It included the following features:</p> <ul> <li>Multi-algorithm simulation engine</li> <li>Create a generic architecture for combining algorithms operating at different time scales on different models</li> <li>Create conductance-based simulator using OpenCL</li> <li>Create a smoothed particle hydrodynamics (SPH) simulator</li> <li>Use the simulation engine architecture to combine these two algorithms to prove its generality and ability to cross algorithmic domains</li> <li>Neuron database</li> <li>Use the Virtual Worm Blender files to create a NeuroML compartmental description of the 302 neurons</li> <li>Combine knowledge about the synaptic structure of the neuronal network with the compartmental description</li> <li>Combine knowledge about the ion channel structure of the neuronal network with the compartmental description</li> <li>Worm browser</li> <li>Build a 3D interactive visualization of the Virtual Worm Blender files, akin to the Google Body Browser</li> </ul>"},{"location":"releases/#simulation-engine","title":"Simulation Engine","text":"<ul> <li>As a developer, I would like a simulation engine prototype that provides a design proof of concept</li> <li>As a developer, I want an alpha kernel for neuronal simulation for the prototype.</li> <li>As a developer, I want a first draft of a simulation engine design</li> <li>As a product manager, I want to see a working prototype of the SPH algorithm working with the existing CyberElegans code</li> <li>As a product manager, I want a initial test implementation example of the SPH algorithm implemented as a solver</li> <li>As a developer, I want a simple test harness to function as client for the simulation engine prototype to ensure everything is working.</li> <li>As a developer, I would like to have a prototype of a solver service, using the HH OpenCL alpha kernel.</li> </ul>"},{"location":"releases/#neuron-database","title":"Neuron Database","text":"<ul> <li>As a developer, I want the Virtual Worm Blender files to include details about synapses so simulatable NeuroML can be produced</li> <li>As a developer, I want to be able to convert the Virtual Worm meshes for neurons into complete simulation ready NeuroML descriptions of the neurons</li> </ul>"},{"location":"releases/#worm-browser","title":"Worm Browser","text":"<ul> <li>As a user I want to visualize 3D models of the worm in the browser</li> <li>As a user, I want to have GUI controls to zoom in and out of the worm</li> <li>As a user, I want to drag the worm using \"cylindrical mouse orbit\" like google body browser</li> <li>As a product manager, I want an example of a Unity3D web player that can visualize the Virtual Worm blender files to mitigate risk</li> <li>As a developer, I want to have the 3D models of the worm prepared in a suitable format so they can be visualized in the Web Browser</li> <li>As a user, I want to use a slider to smoothly make systems in the worm transparent</li> <li>A more complete document describing our plans for release 2 is available.</li> </ul>"},{"location":"Community/github/","title":"Using OpenWorm Repositories on GitHub","text":"<p>Making a contribution of code to the project will first involve forking one of our repositories, making changes, committing them, creating a pull request back to the original repo, and then updating the appropriate part of documentation.</p> <p>An alternate way to contribute is to create a new GitHub repo yourself and begin tackling some issue directly there. We can then fork your repo back into the OpenWorm organization at a later point in order to bring other contributors along to help you.</p> <p>This page contains a list of repositories maintained by the OpenWorm project on GitHub, provides simple instructions for how to access GitHub, contribute and resolve issues, opening new issues, and creating Gists.</p>"},{"location":"Community/github/#repositories","title":"Repositories","text":"<p>View the full current list repositories of repositories on GitHub.</p>"},{"location":"Community/github/#accessing-github","title":"Accessing GitHub","text":"<p>To access the OpenWorm organization on GitHub and fully participate on issues, you will first need to create an account if you do not already have one. Note, you can comment on issues without a GitHub account, however, we recommend joining to maximize your ability to contribute to OpenWorm. Accounts are free and can be created on the Github website.</p>"},{"location":"Community/github/#forking-github-repositories","title":"Forking GitHub Repositories","text":"<p>On GitHub, click the Fork button on a project to create a \"copy\" that you can then modify independently.</p> <p>To fork an OpenWorm repository, go to the repository's page and hit the \"Fork\" button. GitHub will copy the repository to your personal repository. You can then make changes to the repository. Once you are done with the changes, commit them back to your personal account. Then hit the 'Pull Request' button on the repo page under your account. This will create a pull request asking the OpenWorm team to review, comment and merge the changes into the original repository. This follows the so-called 'fork and pull' model.</p> <p>For further details on doing this, check out the help page from Github.</p>"},{"location":"Community/github/#contributing-and-resolving-issues","title":"Contributing and Resolving Issues","text":"<p>View the complete list of issues on GitHub</p> <p>To find issues that are relevant to your skillset and interest, first browse the list above and look for tags related to areas of functionality and coding language. Alternatively, you can view a specific repository and the filter by tags related to the type of issue and coding language. Click on the issue name to open the details. Feel free to explore and dig around.</p>"},{"location":"Community/github/#interacting-with-issues","title":"Interacting with Issues","text":"<p>Generic information from GitHub</p>"},{"location":"Community/github/#closing-an-issue","title":"Closing an Issue","text":"<ul> <li>Via pull requests</li> <li>Via commit messages</li> </ul>"},{"location":"Community/github/#opening-a-new-issue","title":"Opening a New Issue","text":"<p>After logging into GitHub, select the OpenWorm organization and then click on the repository in which the issue is located/relevant to. Click on the Issues tab on the menu to the right.</p> <p></p> <p>Next, click on the New Image button in the upper right corner of the screen.</p> <p></p> <p>This will open the interface to create a new issue. You will need to add the following information:</p> <ul> <li>Name or short description of the issue</li> <li>Full description of the issue, including images if available. (See below for more details on formatting the description.)</li> <li>Assign team members to the issue if appropriate</li> <li>Add a milestone if appropriate</li> <li>Add labels to categorize the issue such as what language is being used, issue status (not started, working, etc.) and what function the issue is related to.</li> </ul> <p></p> <p>Finally, click on Submit New Issue.</p> <p>Best Practices for OpenWorm</p> <p>When writing up the description for a given issue, provide as much context and detail as possible. For clarity, we suggest the following format:</p> <ul> <li>Issue: Summarize the issue at hand and provide links when possible to relevant code, databases and information.</li> <li>Motivation: Provide a reasoning for the request and what resolving the issue will fix or what purpose it will serve.</li> <li>Steps: Create a list of specific steps that need to be completed to resolve the issue.</li> </ul> <p>Links to relevant code, databases, documentation and related issues are strongly recommended.</p> <p>Check out this example of a clearly written issue that follows best practices.</p>"},{"location":"Community/github/#posting-gists-gistgithubcom","title":"Posting Gists (gist.github.com)","text":"<p>Gist is a simple way to share snippets and pastes with others. All gists are Git repositories, so they are automatically versioned, forkable and usable from Git. You can create a new gist here.</p> <p>How to:</p> <ul> <li>Create Gists</li> <li>Fork and Clone Gists</li> </ul>"},{"location":"Community/github/#creating-or-adding-new-repositories","title":"Creating or Adding New Repositories","text":"<p>Already existing repositories can be transferred into the OpenWorm GitHub organization via the \"transfer\" mechanism provided by GitHub. New repositories can be created under the OpenWorm GitHub organization by request.</p>"},{"location":"Community/github/#licenses-on-repositories","title":"Licenses on repositories","text":"<p>In historical practice, OpenWorm members have chosen to use the MIT open source license for their repositories. The ultimate choice of license is up to the the authors of a given repository, but we would ask that all OpenWorm repository authors choose some open source license for your repository and display a LICENSE file in the root of the repository to make it clear how to use it.</p> <p>An example of using the MIT license for OpenWorm code follows:</p> <p>The MIT License (MIT)</p> <p>Copyright (c) 2014 OpenWorm</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"Community/membership/","title":"Membership","text":"<p>Our website has a list of the contributors to the OpenWorm project. Contributors who make regular contributions to the project are considered core members. This page explains the process by which a person becomes a contributor and how a contributor becomes a core member.</p>"},{"location":"Community/membership/#privileges-of-core-members","title":"Privileges of core members","text":"<ul> <li>Core members can nominate contributors for core membership<ul> <li>Core members vote to approve new member nomination (majority wins)</li> </ul> </li> <li>Core members may vote on decisions during meetings</li> </ul>"},{"location":"Community/membership/#qualify-as-core-team","title":"Qualify as core team","text":"<ul> <li>Qualify as contributor</li> <li>Attend at least 4 hangouts over a period of 3 months</li> <li>Hangouts can be the general or any other regular hangout conducting OpenWorm work</li> <li>Have a GitHub account</li> <li>Has been providing regular contributions for at least 3 months</li> </ul>"},{"location":"Community/membership/#stay-on-core-team","title":"Stay on core team","text":"<ul> <li>Core members can be removed if there is silence for two months</li> </ul>"},{"location":"Community/membership/#qualify-as-a-contributor","title":"Qualify as a contributor","text":"<ul> <li>Add at least one meaningful contribution of code or data that fits into an OpenWorm goal into one of the OpenWorm repositories (GitHub, Google Drive, DropBox, etc.)</li> </ul> <p>OR</p> <ul> <li>Add organizational support to the goals of OpenWorm</li> </ul>"},{"location":"Community/membership/#stay-on-as-contributor","title":"Stay on as contributor","text":"<ul> <li>Once you are a contributor, you are a contributor forever</li> </ul>"},{"location":"Community/membership/#hangouts-invite-criteria","title":"Hangouts invite criteria","text":"<ul> <li>Everybody who is a contributor gains the privilege to join the hangouts so that they can gain core team membership if they want</li> </ul>"},{"location":"Community/repositories/","title":"Repos","text":""},{"location":"Community/repositories/#wormbrowser","title":"wormbrowser","text":"<p>repo | gitter</p> <ul> <li> <p>lang(s): html5</p> </li> <li> <p>keyword(s): data, anatomy, cells</p> </li> <li> <p>contact: stephen@openworm.org</p> </li> </ul> <p>The Worm Browser -- a 3D browser of the cellular anatomy of the c. elegans</p> <p>Last generated 2023-12-26</p>"},{"location":"Community/repositories/#openwormgithubio","title":"openworm.github.io","text":"<p>repo | gitter | contributor guide</p> <ul> <li> <p>lang(s): html5</p> </li> <li> <p>keyword(s): website</p> </li> <li> <p>current version: 2017-12-13 DEPLOYED_121317 (DEPLOYED_121317)</p> </li> <li> <p>contact: stephen@openworm.org</p> </li> </ul> <p>OpenWorm Website</p> <p>Last generated 2024-07-02</p>"},{"location":"Community/repositories/#orggeppetto","title":"org.geppetto","text":"<p>repo | gitter</p> <ul> <li> <p>current version: 2019-05-14 Geppetto Release 1.0.0 alpha (v1.0.0-alpha)</p> </li> <li> <p>contact: matteo@geppetto.org</p> </li> </ul> <p>Geppetto - An open platform for life sciences data exploration, visualization and simulation</p> <p>Last generated 2024-07-02</p>"},{"location":"Community/repositories/#celegansneuroml","title":"CElegansNeuroML","text":"<p>repo</p> <ul> <li> <p>lang(s): python</p> </li> <li> <p>keyword(s): cells, channels, synapses, neurons, simulation, conductance-based models, gap junctions, neurotransmitters</p> </li> <li> <p>contact: stephen@openworm.org</p> </li> </ul> <p>NeuroML based C elegans model, contained in a neuroConstruct project</p> <p>Last generated 2024-05-23</p>"},{"location":"Community/repositories/#cyberelegans","title":"CyberElegans","text":"<p>repo | gitter</p> <ul> <li> <p>lang(s): c++</p> </li> <li> <p>keyword(s): simulation, worm body</p> </li> <li> <p>contact: skhayrulin@openworm.org</p> </li> </ul> <p>Neuromechanical model of C. Elegans</p> <p>Last generated 2024-06-07</p>"},{"location":"Community/repositories/#muscle_model","title":"muscle_model","text":"<p>repo</p> <ul> <li> <p>lang(s): python</p> </li> <li> <p>keyword(s): mathematical model, conductance model, muscles, cells, channels</p> </li> <li> <p>current version: 2018-12-05 v0.1 (v0.1)</p> </li> <li> <p>contact: stephen@openworm.org</p> </li> </ul> <p>Model of c.elegans muscle based on Boyle &amp; Cohen 2008</p> <p>Last generated 2024-05-28</p>"},{"location":"Community/repositories/#sibernetic","title":"sibernetic","text":"<p>repo | gitter</p> <ul> <li> <p>lang(s): c++, python</p> </li> <li> <p>keyword(s): simulation, physics, particles, worm body</p> </li> <li> <p>current version: 2015-07-28 ['0.0.3']</p> </li> <li> <p>contact: palyanov.andrey@openworm.org</p> </li> </ul> <p>This is a C++/OpenCL implementation of the PCISPH algorithm supplemented with a set of biomechanics simulations related features applied to C. elegans locomotion</p> <p>Last generated 2024-06-30</p>"},{"location":"Community/repositories/#openworm","title":"OpenWorm","text":"<p>repo | contributor guide</p> <ul> <li> <p>current version: 2023-11-17 0.9.4 (0.9.4)</p> </li> <li> <p>contact: stephen@openworm.org</p> </li> </ul> <p>Project Home repo for Central Dockerfile and Project-wide issues</p> <p>Last generated 2024-07-02</p>"},{"location":"Community/repositories/#openwormbrowser-ios","title":"openwormbrowser-ios","text":"<p>repo</p> <ul> <li> <p>lang(s): Objective-C</p> </li> <li> <p>keyword(s): iOs, data, anatomy, cells</p> </li> <li> <p>contact: stephen@openworm.org</p> </li> </ul> <p>OpenWorm Browser for iOS, based on the open-3d-viewer, which was based on Google Body Browser</p> <p>Last generated 2023-07-04</p>"},{"location":"Community/repositories/#sibernetic_config_gen","title":"sibernetic_config_gen","text":"<p>repo | gitter</p> <ul> <li> <p>lang(s): python</p> </li> <li> <p>keyword(s): simulation, physics, particles, worm body, configuration</p> </li> <li> <p>contact: skhayrulin@openworm.org</p> </li> </ul> <p>Generates starting scene configuration for the Sibernetic simulation engine</p> <p>Last generated 2023-07-04</p>"},{"location":"Community/repositories/#openworm_docs","title":"openworm_docs","text":"<p>repo | contributor guide</p> <ul> <li> <p>lang(s): markdown</p> </li> <li> <p>keyword(s): readthedocs, documenation</p> </li> <li> <p>contact: stephen@openworm.org</p> </li> </ul> <p>Documentation for OpenWorm</p> <p>Last generated 2024-07-02</p>"},{"location":"Community/repositories/#blender2neuroml","title":"Blender2NeuroML","text":"<p>repo</p> <ul> <li> <p>lang(s): python</p> </li> <li> <p>keyword(s): 3D, Blender, NeuroML, neurons</p> </li> <li> <p>contact: skhayrulin@openworm.org</p> </li> </ul> <p>Interface between Sibernetic and NEURON simulator</p> <p>Last generated 2024-02-29</p>"},{"location":"Community/repositories/#open-worm-analysis-toolbox","title":"open-worm-analysis-toolbox","text":"<p>repo | gitter</p> <ul> <li> <p>lang(s): python</p> </li> <li> <p>keyword(s): data, tools</p> </li> <li> <p>contact: mcurrie@openworm.org</p> </li> </ul> <p>A testing pipeline that allows us to run a behavioural phenotyping of our virtual worm running the same test statistics the Schafer Lab used on their worm data.</p> <p>Last generated 2024-04-17</p>"},{"location":"Community/repositories/#owmeta","title":"owmeta","text":"<p>repo</p> <ul> <li> <p>current version: 2020-10-15 Release 0.12.2 (v0.12.2)</p> </li> <li> <p>contact: stephen@openworm.org</p> </li> </ul> <p>Unified, simple data access python library for data &amp; facts about C. elegans anatomy</p> <p>Last generated 2024-02-14</p>"},{"location":"Community/repositories/#skeletonextraction","title":"skeletonExtraction","text":"<p>repo | gitter</p> <ul> <li> <p>lang(s): c++</p> </li> <li> <p>keyword(s): simulation, animation, COLLADA, worm body</p> </li> <li> <p>contact: matteo@openworm.org</p> </li> </ul> <p>Transforms Sibernetic output into a COLLADA animation</p> <p>Last generated 2023-07-04</p>"},{"location":"Community/repositories/#yarom","title":"YAROM","text":"<p>repo</p> <p>Contains some RDF-Python mapping logic used by PyOpenWorm</p> <p>Last generated 2023-07-04</p>"},{"location":"Community/repositories/#hodgkin_huxley_tutorial","title":"hodgkin_huxley_tutorial","text":"<p>repo</p> <ul> <li> <p>lang(s): markdown</p> </li> <li> <p>keyword(s): tutorial, simulation, conductance-based models</p> </li> <li> <p>current version: 2022-07-26 Release v0.1.1 (v0.1.1)</p> </li> <li> <p>contact: stephen@openworm.org</p> </li> </ul> <p>Hodgkin Huxley Tutorial</p> <p>Last generated 2024-06-16</p>"},{"location":"Community/repositories/#sibernetic_neuron","title":"sibernetic_NEURON","text":"<p>repo | gitter</p> <ul> <li> <p>lang(s): NEURON, python</p> </li> <li> <p>keyword(s): simulation, NEURON, particles, worm body</p> </li> <li> <p>contact: skhayrulin@openworm.org</p> </li> </ul> <p>Interface between Sibernetic and NEURON simulator</p> <p>Last generated 2023-07-04</p>"},{"location":"Community/repositories/#tracker-commons","title":"tracker-commons","text":"<p>repo | gitter</p> <ul> <li> <p>lang(s): scala, python, java, r, julia, octave, matlab, c, c++</p> </li> <li> <p>keyword(s): data</p> </li> <li> <p>current version: 2016-04-17 ['beta 1.1.0']</p> </li> <li> <p>contact: mcurrie@openworm.org</p> </li> </ul> <p>Compilation of information and code bases related to open-source trackers for C. elegans</p> <p>Last generated 2023-07-04</p>"},{"location":"Community/repositories/#neuronal-analysis","title":"neuronal-analysis","text":"<p>repo | gitter</p> <ul> <li> <p>lang(s): python</p> </li> <li> <p>keyword(s): analysis, neurons, data</p> </li> <li> <p>contact: stephen@openworm.org</p> </li> </ul> <p>Tools to produce, analyse and compare both simulated and recorded neuronal dataset</p> <p>Last generated 2023-07-04</p>"},{"location":"Community/repositories/#simple-c-elegans","title":"simple-C-elegans","text":"<p>repo | gitter</p> <ul> <li> <p>lang(s): python</p> </li> <li> <p>keyword(s): data, simulation, cells, channels, synapses, gap junctions, neurotransmitters</p> </li> <li> <p>contact: stephen@openworm.org</p> </li> </ul> <p>Minimalist Python code -- based on OpenWorm and the published literature -- for modeling C. elegans neural network dynamics</p> <p>Last generated 2024-06-11</p>"},{"location":"Community/repositories/#johnsonmailler_musclemodel","title":"JohnsonMailler_MuscleModel","text":"<p>repo</p> <ul> <li> <p>lang(s): python</p> </li> <li> <p>keyword(s): mathematical model, conductance model, muscles, cells, channels</p> </li> <li> <p>contact: p.gleeson@gmail.com</p> </li> </ul> <p>Model of c.elegans muscle based on Johnson &amp; Mailler, 2015</p> <p>Last generated 2023-11-13</p>"},{"location":"Community/repositories/#c302","title":"c302","text":"<p>repo</p> <ul> <li> <p>lang(s): Python</p> </li> <li> <p>keyword(s): cells, channels, synapses, neurons, simulation, conductance-based models, gap junctions, neurotransmitters</p> </li> <li> <p>current version: 2018-07-31 v0.7.0 (v0.7.0)</p> </li> <li> <p>contact: p.gleeson@gmail.com</p> </li> </ul> <p>NeuroML based model of C. elegans nervous system</p> <p>Last generated 2024-06-29</p>"},{"location":"Community/repositories/#owmeta-core","title":"owmeta-core","text":"<p>repo</p> <ul> <li> <p>current version: 2020-11-21 Release 0.13.1 (v0.13.1)</p> </li> <li> <p>contact:  <p>Unified, simple data access python library for data &amp; facts about C. elegans anatomy</p> <p>Last generated 2024-06-11</p>"},{"location":"Community/repositories/#owmeta-sciunit","title":"owmeta-sciunit","text":"<p>repo</p> <ul> <li> <p>keyword(s): sciunit, model-validation</p> </li> <li> <p>contact: mark@openworm.org</p> </li> </ul> <p>Classes for describing SciUnit models, tests, and results with owmeta</p> <p>Last generated 2023-07-04</p>"},{"location":"Community/repositories/#owmeta-modeldb","title":"owmeta-modeldb","text":"<p>repo</p> <ul> <li> <p>keyword(s): modeldb, neuron, computational-neuroscience</p> </li> <li> <p>contact: mark@openworm.org</p> </li> </ul> <p>Tools for retrieving ModelDB models and using them within the owmeta framework</p> <p>Last generated 2023-07-04</p>"},{"location":"Community/repositories/#owmeta-movement","title":"owmeta-movement","text":"<p>repo</p> <ul> <li>contact: mark@openworm.org</li> </ul> <p>Tools for managing C. elegans movement data with owmeta</p> <p>Last generated 2023-07-04</p>"},{"location":"Projects/DevoWorm/","title":"DevoWorm","text":"<p>The DevoWorm website is located at devoworm.weebly.com. The website features links to  educational, academic, media-related and collaborative opportunities associated with the project. DevoWorm is affiliated with the OpenWorm Foundation and the Orthogonal Research Laboratory. We engage in Open Science, an encourage the use of Jupyter Notebooks, short video descriptions of research, and demos.</p>"},{"location":"Projects/DevoWorm/#roadmap","title":"Roadmap","text":"<p>DevoWorm is currently divided into three loosely-knit interest areas: developmental dynamics, cybernetics and digital morphogenesis, and reproduction and developmental plasticity. While our main interest is in the nematode Caenorhabditis elegans, we are also interested in cross-species comparative work.</p> <p>Developmental Dynamics currently involves using secondary data collected from embryos along with bioinformatic and data science techniques to answer questions regarding the process of early embryogenesis and the timing of later morphogenesis. To address these problems, we have used number of innovative approaches. </p> <p>Cybernetics and Digital Morphogenesis has involved using platforms such as Morphozoic (Cellular Automata) or CompuCell3D (Cellular Potts Model) to better understand physical interactions during embryogenesis and morphogenesis. We have also explored the use of cybernetic models and concepts to better understand the general process of embryogenesis.</p> <p>Reproduction and Developmental Plasticity involves utilizing an evo-devo approach to understand Caenorhabditis elegans more generally. Our existing datasets and papers include a focus on larval development and life-history processes. This area of the project also features primary empirical data, based on formal experimental design.</p> Objective Examples Developmental Dynamics (DD) Comparative Quantitative Embryogenesis DD Differentiation Trees and Maps DD Embryo Networks and Developmental Connectomes DD Time-series of Terminal Differentiation Cybernetics and Digital Morphogenesis (C-DM) Morphozoic (Cellular Automata) C-DM Cybernetic Embryo C-DM CompuCell 3D Reproduction and Developmental Plasticity (R-DP) Experimental Evolution R-DP Life-history Plasticity"},{"location":"Projects/DevoWorm/#repos-in-devoworm-github","title":"Repos in DevoWorm Github","text":"Repo Name Description Google Summer of Code 2017 GSoC Activities for 2017 CC3D CompuCell 3D Models Embryogenetic Connectome Embryogenetic Connectome Analysis Assorted Notebooks Project-related Jupyter Notebooks Graphical Visualization Code for Graph Creation Datasets and Analysis Tools for Developmental Data Science Morphozoic Morphozoic Models"},{"location":"Projects/browser/","title":"OpenWorm Browser","text":"<p>A WebGL based C. elegans body browser implemented as part of the OpenWorm project. </p> <p>The 3D C. elegans neurons are provided by the VirtualWorm project. We are using the open-3d-viewer as WebGl engine.</p> <p></p> <p>The OpenWorm Browser can be accessed here.</p> <p>The source code for this project can be found here. </p>"},{"location":"Projects/c-elegans-robot/","title":"C. elegans robot","text":"<p>One of the goals of the OpenWorm project is to promote awareness of the biology of the C. elegans nematode worm. In the robotics project,  this takes the form of creating physical implementations of the worm which approximate prevalent scientific models. The downside of this  is that C. elegans is, of course, not a robot. However, simulating the worm in robotic form manifests a tangible aspect that pure software  models do not possess. A worm robot also sidesteps working with the actual worm, a transparent 1mm organism, which requires special conditions  and equipment, such as lighting and microscopes. Another aim of the robotics effort is to foster crossover education in biology, robotics,  and coding. This can take the form of either specifying or producing kits of parts that can be assembled by students in school settings or by generally interested parties.</p> <p>The robot is controlled by a Raspberry Pi/ESP32 processor that contains a recorded simulation of the worm's neuromuscular system (see references). The robot's body is a sequence of segments that mutually exert simulated muscle contractions impemented by servos.</p>"},{"location":"Projects/c-elegans-robot/#repository","title":"Repository","text":"<p>OpenWorm robots repository on GitHub.</p> <p>Folders: 1. WormHost: PC code to communicate with the onboard Raspberry Pi. 2. WormRPi: Raspberry Pi onboard code. 3. WormESP32: ESP32 onboard code. 4. WormSim: C. elegans neuromuscular simulator. 5. assembly: parts list, 3D printing .stl shape files, and assembly instructions. 6. docs: robot description.</p>"},{"location":"Projects/c-elegans-robot/#references","title":"References","text":"<p>Boyle, Berri and Cohen, \"Gait modulation in C. elegans: an integrated neuromechanical model\", Front. Comput. Neurosci., 2012.</p> <p>Eduardo J. Izquierdo and Randall D. Beer, \"An Integrated Neuromechanical Model of Steering in C. elegans\", ECAL15</p>"},{"location":"Projects/c302/","title":"c302 modelling framework for C. elegans","text":"<p>c302 is a framework for generating network models in NeuroML 2 based on C. elegans connectivity data. It is primarily intended as a way to generate neuronal networks at multiple levels of detail for the OpenWorm project. </p> <p></p> <p>For full details see here.</p>"},{"location":"Projects/community-proj/","title":"Community Outreach subproject","text":"<p>The effort to build the OpenWorm open science community is always ongoing. You can find out more about our OpenWorm community on another page.</p>"},{"location":"Projects/community-proj/#previous-accomplishments","title":"Previous accomplishments","text":"<ul> <li>Past Journal clubs</li> <li>Media attention</li> <li>Attracting contributors</li> <li>Attracting supporters</li> <li>Successful crowdfunding</li> </ul>"},{"location":"Projects/community-proj/#associated-repositories","title":"Associated Repositories","text":"Repository Description Language org.openworm.website OpenWorm Website (source of main site at openworm.org) Python, Markdown OpenWorm Project home repo for OpenWorm, with Docker image and project-wide issues Matlab, Python, Docker openworm_docs Detailed documentation for OpenWorm (source of these pages) Markdown"},{"location":"Projects/datarep/","title":"Data Collection and Representation","text":"<p>There is not a single data source for our simulation; in fact one of our unique challenges is coming up with new ways to work out how to integrate multiple data sets together. On this page you can read about how different dataset are used in the model.</p> <p>Being an integrative model, OpenWorm utilizes different datasets, each with different file formats and interfaces to the model. There is no master representation of all the data incorporated into the model, instead our aim is to keep the model open to be able to cope with different data structures.</p> <p>Consider the connectomics data. There are different useful ways to mine this data set. For example, a NetworkX representation of the connectome as a complex graph enables questions to be asked about first and second nearest neighbors of a given neuron. In contrast, an RDF semantic graph representation is useful for reading and writing annotations about multiple aspects of a neuron, such as what papers have been written about it, multiple different properties it may have such as ion channels and neurotransmitter receptors and so on. A NeuroML representation is useful for answering questions about model morphology and simulation parameters. Lastly, a Blender representation is a full 3D shape definition that can be used for calculations in 3D space.</p> <p>Using these different representations separately leads to ad hoc scripting for for each representation. This presents a challenge for data integration and consolidation of information. An ongoing development of the project is to create a unified data access layer (see OWMeta below), which enables different representations to become encapsulated into an abstract view. This allows the user to work with objects related to the biological reality of the worm. This has the advantage that the user can forget about which representation is being used under the hood.</p> <p>Here is a list of some of the data sets that we have used so far:</p> <ul> <li>The Virtual Worm (3D atlas of C. elegans anatomy)</li> <li>The C. elegans connectome (wiring diagram of neurons)</li> <li>Cell list of C. elegans</li> <li>Ion channels used by C. elegans</li> <li>Database of Worm behavioral phenotypes</li> </ul> <p>Currently our work on data collection and representation is divided among four subprojects:</p> <ul> <li>NeuroML Connectome</li> <li>Data Visualization</li> <li>OWMeta Unified Data Access Layer</li> <li>Muscle cell integration</li> </ul> <p>Below you can find information about each subproject, see the project\u2019s current roadmap and access the associated data repositories</p> <p>A lot of data about C. elegans is integrated into the model. In this project, we work on what forms we should put these data in to best leverage them for building the model.</p>"},{"location":"Projects/datarep/#neuroml-connectome","title":"NeuroML Connectome","text":"<p>Our computational strategy to accomplish this involves first reusing the C. elegans connectome and the 3D anatomical map of the C. elegans nervous system and body plan. We have used the NeuroML standard (Gleeson et al., 2010) to describe the 3D anatomical map of the C. elegans nervous system. This has been done by discretizing each neuron into multiple compartments, while preserving its three-dimensional position and structure. We have then defined the connections between the NeuroML neurons using the C. elegans connectome. Because NeuroML has a well-defined mapping into a system of Hodgkin-Huxley equations, it is currently possible to import the \"spatial connectome\" into the NEURON simulator (Hines &amp; Carnevale 1997) to perform in silico experiments.</p>"},{"location":"Projects/datarep/#previous-accomplishments","title":"Previous accomplishments","text":"<ul> <li>Building the C. elegans NeuroML file</li> </ul>"},{"location":"Projects/datarep/#current-roadmap","title":"Current roadmap","text":""},{"location":"Projects/datarep/#updated-neuroml-connectome-model","title":"Updated NeuroML connectome model","text":"<p>The NeuroML connectome model provides a framework for multi-compartmental modeling of the C. elegans nervous system. We are continuing to refine this to include more and more information that is known about the anatomy and dynamics of the nervous system in order to reach ever-improving biological realism.</p> <ul> <li>Create sample NeuroML connectome output</li> <li>Remove Glutamate_GJ etc in neuroConstruct project</li> <li>Create or reuse a NeuroML description of C. elegans motor neuron synapses</li> </ul>"},{"location":"Projects/datarep/#issues-list","title":"Issues list","text":"<p>All issues related to working with data, and doing research can be found on GitHub.</p>"},{"location":"Projects/datarep/#associated-repositories","title":"Associated Repositories","text":"Repository Description Language CElegansNeuroML NeuroML based C. elegans model, contained in a neuroConstruct project Java Blender2NeuroML Conversion script to bring neuron models drawn in Blender into NeuroML format Python NEURONSimData Graphing voltage data from NEURON sims of C. elegans conectome Python OWMeta Metadata extraction, translation, storage, and sharing Python"},{"location":"Projects/datarep/#data-visualization","title":"Data Visualization","text":"<p>With the ever increasing capacity to collect data about biological system, the new challenge is to understand what these dataset tell us about the system. The computational neuroscience community is developing a range of methods to extract knowledge from these datasets. One approach the accomplish this task is to represent the data visually. Our team has already produced the OpenWorm browser for web and iOS, which makes it easy to visually study the anatomy of the the worm.</p>"},{"location":"Projects/datarep/#previous-accomplishments_1","title":"Previous accomplishments","text":"<ul> <li>OpenWorm browser</li> <li>OpenWorm browser iOS</li> <li>Hive Plots visualizations of connectome</li> </ul>"},{"location":"Projects/datarep/#current-roadmap_1","title":"Current roadmap","text":"<ul> <li>Create a D3 implementation of the C. elegans connectome HivePlot</li> </ul>"},{"location":"Projects/datarep/#issues-list_1","title":"Issues list","text":"<p>All issues related to working with data, and doing research can be found on GitHub.</p>"},{"location":"Projects/datarep/#associated-repositories_1","title":"Associated Repositories","text":"Repository Description Language wormbrowser The Worm Browser -- a 3D browser of the cellular anatomy of the c. elegans Javascript openwormbrowser-ios OpenWorm Browser for iOS, based on the open-3d-viewer, which was based on Google Body Browser Objective-C"},{"location":"Projects/docker/","title":"Docker simulation stack","text":"<p>We have created a Docker container which contains all of the major components of the simulation stack we have built so far (including Sibernetic and c302). It can be used to run a preliminary model of the worm in 3D on your computer. </p> <p></p> <p>Details on installing and using the OpenWorm Docker simulation stack can be found here.</p> <p>The source code for this project can be found here. </p>"},{"location":"Projects/geppetto/","title":"Geppetto Simulation Engine","text":"<p>In order to allow the world to play with the model easily, we are engineering Geppetto, an open-source modular platform to enable multi-scale and multi-algorithm interactive simulation of biological systems. Geppetto features a built-in WebGL visualizer that offers out-of-the-box visualization of simulated models right in the browser. You can read about architectural concepts and learn more about the different plug-in bundles we are working on.</p> <p>Geppetto, is written in Java and leverages technologies like OSGi, Spring Framework, OpenCL and Maven.</p> <p>Geppetto's frontend is written using THREE.js and WebGL. Back-end / front-end communication happens via JSON messages through WebSocket.</p> <p>The engine runs on on Eclipse Virgo WebServer deployed on an Amazon Elastic Compute Cloud Linux instance.</p> <p>The definitive documentation for Geppetto is available online.</p>"},{"location":"Projects/muscle-neuron-integration/","title":"Muscle-Neuron-Channel Integration","text":""},{"location":"Projects/muscle-neuron-integration/#high-level-overview","title":"High-level Overview","text":"<p>The fidelity of OpenWorm to its biological counterpart, C. elegans, depends on the realism of its constituent parts, such as computationally-modelled cells. The internal dynamics of these cells are largely controlled by ion channels, so a biophysically-informed ion channel model will, in-turn, support a realistic model of the entire organism.</p> <p>Broadly speaking, the team for this project will develop a workflow and tools to simulate C. elegans cell dynamics using simulated ion channel (intracellular) dynamics.</p> <p></p> <p>The literature will be mined for scientific papers with ion channel data, which will be fed to the ChannelWorm pipeline. Inside the pipeline, data are extracted from the papers by various means, including digitization of figures. These data are then used to construct ion channel models.</p> <p>Each ion channel model is simulated and, depending on its performance in a set of validation tests, takes one of two paths. If the model passes validation, it is stored in the project's database (OWMeta) for later use. Otherwise the model fails validation, and is used as input for the optimization package. After tuning a model's parameters to the literature values, the model is updated, simulated, and passed to the validation phase again. This loop of modeling, validation and optimization may take several runs before a model passes.</p> <p>Once the ion channel models are successfully validated and stored in the OWMeta database, they can be incorporated into cellular models in both the Muscle Model and c302 subprojects. In each of these sections - OWMeta database, Muscle Model and c302 - there are corresponding validation tests that ensure the integrity of their respective components. The validation tests will employ a similar approach in each subproject, and will be written using the same framework.</p>"},{"location":"Projects/muscle-neuron-integration/#tracking-progress","title":"Tracking progress","text":"<p>Issues for this set of projects are organized on our project board, and may give a clearer picture of what is going on in each of them.</p> <p>Below is a similarly organized board keeping track of our higher-level milestones in each repository (in the Muscle / Neuron / Channel list), which will be updated as this meta-project develops.</p> <p></p>"},{"location":"Projects/muscle-neuron-integration/#modeling-validation-optimization-loop","title":"Modeling / Validation / Optimization Loop","text":"<p>This figure describes, in a general way, how ion channel models are simulated and incrementally fit to their observed counterparts, as will be done in the ChannelWorm subproject.</p> <p>Depending on the type of data being used (e.g. patch-clamp data or homology modelling), the implementation will differ, but our approach will still follow this pattern.</p> <p>Let's take an example channel model being compared to patch-clamp data from the literature:</p> <ol> <li>We have a given channel model (ex: ca_boyle)</li> <li>Run it through simulating scripts (ex: Rayner's scripts)</li> <li>These scripts give us a simulate I/V curve, which can be compared to a digitized I/V curve from the literature (example digitized curve)</li> <li>Depending on the result of a test comparing these two I/V curves, the model is either kept or optimized further using NeuroTune.</li> </ol>"},{"location":"Projects/muscle-neuron-integration/#model-completion-dashboard","title":"Model Completion Dashboard","text":"<p>This is one possible interface that will display the results of the unifying modeling activity.</p> <p>This interface allows a user to drill down into our model, and view the states of completion of modeled components at each level. At the highest level, matrices display, using a color indicator, the level of completion of each cell in the model.</p> <p>By clicking one of these cells, the section below focuses on that cell. Ion channels that exist in that cell are displayed in a grid with completion coloring, and simulation/experimental data for the cell is compared in plots.</p> <p>Individual ion channels can be clicked on and selected from the grid, with parameters and simulation/experimental comparison plots available.</p> <p>Rolling over the data displayed at each level gives information about the references for that particular piece of data.</p> <p>Clicking on the image below will let you view the raw drawing, and see more detailed annotations for each element.</p> <p></p>"},{"location":"Projects/muscle-neuron-integration/#channelworm","title":"ChannelWorm","text":"<p>The ChannelWorm subproject is, at a high level, a pipeline to convert ion channel data found in scientific papers into ion channel models. This pipeline involves:</p> <ol> <li>Identification of papers with ion channel data.</li> <li>Extraction of data from these papers, including figures, active parameters and tabular data.</li> <li>Digitization of figures, and more generally, converting this information into machine-readable form.</li> </ol> <p>The output of the pipeline will either be fed into an optimization engine or stored in a database, depending on the results of validation tests.</p>"},{"location":"Projects/muscle-neuron-integration/#current-roadmap","title":"Current roadmap","text":"<p>We are tracking milestones for this project over here.</p> <p>The tasks ahead include:</p> <ol> <li>Run Rayner's scripts on an example cell, and get output.</li> <li>Establish common format between outputs of Rayner's script (above) and digitized plots from scientific articles.</li> <li>Write test to compare digitized plots and plots generated from ion channel model.</li> </ol>"},{"location":"Projects/muscle-neuron-integration/#issues-list","title":"Issues list","text":"<p>Issues for this part of the project are tracked and raised in the Github repo, as well as the ChannelWorm project board.</p>"},{"location":"Projects/muscle-neuron-integration/#associated-repositories","title":"Associated Repositories","text":"<ul> <li>ChannelWorm</li> </ul>"},{"location":"Projects/muscle-neuron-integration/#optimization","title":"Optimization","text":"<p>The Neurotune package provides neurotune a package for optimizing electrical models of excitable cells.</p> <p>In other words, Neurotune provides a solution for optimizing the parameters of a model to match a specific output. In the case of ChannelWorm, the parameters are electrical ion channel parameters, and the desired output is patch-clamp data comparable to that observed in real life.</p>"},{"location":"Projects/muscle-neuron-integration/#associated-repositories_1","title":"Associated Repositories","text":"<ul> <li>Neurotune</li> <li>NeuroTune docs</li> </ul>"},{"location":"Projects/muscle-neuron-integration/#owmeta-unified-data-access-layer","title":"OWMeta Unified Data Access Layer","text":"<p>We have consolidated a lot of data about the worm into a python library that creates a unified data access layer called OWMeta. Documentation for OWMeta is available online.</p>"},{"location":"Projects/muscle-neuron-integration/#previous-accomplishments","title":"Previous accomplishments","text":"<ul> <li>Building the original OpenWorm database</li> <li>Initial release of OWMeta</li> </ul>"},{"location":"Projects/muscle-neuron-integration/#current-roadmap_1","title":"Current roadmap","text":"<p>OWMeta will be used in the information storage aspect of various other subprojects. For instance, ChannelWorm will use OWMeta to store ion channel data and models that it retrieves from scientific papers. Next steps involve:</p> <ol> <li>Adapting OWMeta's existing infrastructure to serve ChannelWorm</li> <li>Filling the database with information, being sure to tag each fact with sources along the way.</li> <li>Finalize remaining issues for OWMeta version alpha0.5</li> <li>Document Neuron Ion Channels: Types</li> <li>Document Ion channels: Research Claims</li> </ol>"},{"location":"Projects/muscle-neuron-integration/#issues-list_1","title":"Issues list","text":"<p>Issues for OWMeta are tracked on Github.</p>"},{"location":"Projects/muscle-neuron-integration/#associated-repositories_2","title":"Associated Repositories","text":"<ul> <li>OWMeta</li> </ul>"},{"location":"Projects/muscle-neuron-integration/#muscle-model","title":"Muscle Model","text":"<p>The muscle model subproject is concerned with modelling and simulation at the cellular level, specifically attempting to simulate the electrical dynamics of a C. elegans body wall muscle cell.</p> <p>This depends on what happens in ChannelWorm, since ion channel dynamics are integral to our simulation of membrane dynamics.</p> <p>Because the muscle cell is driven both by an electrical model and a mechanical model, it is a focus of integration between different algorithms. Previously we have created a separate repository for the muscle model that is an adaptation of the work by Boyle &amp; Cohen, 2008. We have an approximately working version implemented in NEURON and are porting this to be fully NeuroML2 compliant. </p> <p>The electrical side of the model is currently the focus of the OpenWorm Muscle / Neuron Team. You can connect with the team on real time chat (if you haven't signed up as a contributor to get your Slack invitation, you can do that here).</p> <p>To catch up with recent developments of this team, please see the following resources:</p> <ul> <li>Meeting #1 (YouTube Video) (Agenda)</li> <li>Meeting #2 (YouTube Video) (Agenda)</li> <li>Synapse journal club (YouTube Video) (Slides)</li> <li>Meeting #3 (YouTube Video) (Agenda)</li> </ul> <p>Some additional background materials that will help explain neuroscience concepts relevant to to this in two minutes each are below:</p> <ul> <li>The neuron</li> <li>Membrane potential</li> <li>Synaptic transmission</li> <li>Receptors and ligands</li> </ul>"},{"location":"Projects/muscle-neuron-integration/#previous-accomplishments_1","title":"Previous accomplishments","text":"<ul> <li>Implementation of Boyle &amp; Cohen muscle model in python</li> <li>Conversion of model into NEURON</li> <li>Simulation of NeuroML2 ion channels in LEMS</li> </ul>"},{"location":"Projects/muscle-neuron-integration/#current-roadmap_2","title":"Current roadmap","text":"<p>Some of the next steps for the muscle model subproject include:</p> <ol> <li>Create unit test on the full muscle model that reproduces Figure 1A from Liu, Hollopeter, &amp; Jorgensen 2009</li> <li>Create unit test that verifies correct I/V curve for ca_boyle NML2 channel</li> <li>Update optimization.py to run with neurotune instead of optimalneuron</li> </ol>"},{"location":"Projects/muscle-neuron-integration/#issues-list_2","title":"Issues list","text":"<p>Issues for the muscle model are tracked on Github.</p>"},{"location":"Projects/muscle-neuron-integration/#associated-repositories_3","title":"Associated Repositories","text":"<ul> <li>Muscle_model</li> </ul>"},{"location":"Projects/muscle-neuron-integration/#c302","title":"c302","text":"<p>The c302 subproject is an effort to simulate the connectome of C. elegans, which includes its 302 neurons. The neural dynamics will start out with biologically-unrealistic integrate and fire cells, and be replaced with incrementally more realistic dynamics, as tests pass. Like the musclemodel, dynamics of neurons depend on ion channel dynamics within the cells, and thus depend on the channelworm subproject.</p>"},{"location":"Projects/muscle-neuron-integration/#previous-accomplishments_2","title":"Previous accomplishments","text":"<ul> <li>Generate NeuroML2 using libNeuroML combined with connectivity data</li> <li>Run simulations of the connectome in LEMS using jNeuroML or pyNeuroML</li> </ul>"},{"location":"Projects/muscle-neuron-integration/#current-roadmap_3","title":"Current roadmap","text":"<ol> <li>Create validation tests using SciUnit or a similar framework.</li> <li>Run validation tests.</li> </ol>"},{"location":"Projects/muscle-neuron-integration/#issues-list_3","title":"Issues list","text":"<p>Issues for c302 are tracked in the CElegansNeuroML repo.</p>"},{"location":"Projects/muscle-neuron-integration/#associated-repositories_4","title":"Associated Repositories","text":"<ul> <li>CElegansNeuroML</li> </ul>"},{"location":"Projects/optimization/","title":"Optimization engine","text":"<p>The Optimization engine uses optimization techniques like genetic algorithms to help fill gaps in our knowledge of the electrophysiology of C. elegans muscle cells and neurons.</p> <p>These two algorithms, Hodgkin-Huxley and SPH, require parameters to be set in order for them to function properly, and therefore create some \"known unknowns\" or \"free parameters\" we must define in order for the algorithm to function at all. For Hodgkin-Huxley we must define the ion channel species and set their conductance parameters. For SPH, we must define mass and the forces that one set of particles exert on another, which in turn means defining the mass of muscles and how much they pull. The conventional wisdom on modeling is to minimize the number of free parameters as much as possible, but we know there will be a vast parameter space associated with the model.</p> <p>To deal with the space of free parameters, two strategies are employed. First, by using parameters that are based on actual physical processes, many different means can be used to provide sensible estimates. For example, we can estimate the volume and mass of a muscle cell based on figures that have been created in the scientific literature that show its basic dimensions, and some educated guesses about the weight of muscle tissue. Secondly, to go beyond educated estimates into more detailed measurements, we can employ model optimization techniques. Briefly stated, these computational techniques enable a rational way to generate multiple models with differing parameters and choose those sets of parameters that best pass a series of tests. For example, the conductances of motor neurons can be set by what keeps the activity those neurons within the boundaries of an appropriate dynamic range, given calcium trace recordings data of those neurons as constraints.</p>"},{"location":"Projects/optimization/#previous-accomplishments","title":"Previous accomplishments","text":"<ul> <li>Genetic algorithms applied to tuning muscle cell models</li> </ul>"},{"location":"Projects/optimization/#current-roadmap","title":"Current roadmap","text":""},{"location":"Projects/optimization/#story-muscle-cell-model-output-closely-matches-that-of-real-data","title":"STORY: Muscle Cell model output closely matches that of real data","text":"<p>We will show that we have built a model of C. elegans muscle cell that matches data recorded from the nematode muscle cell. In part, we will use techniques of model optimization to fill in gaps in the model parameter space (deduce unmeasured parameters). The main technical challenge is tuning muscle cell passive properties and building a larger data set (more cell recordings).</p>"},{"location":"Projects/optimization/#bionet-training-c-elegans-with-a-specialized-genetic-algorithm","title":"Bionet: training C. elegans with a specialized genetic algorithm","text":"<p>The C. elegans connectome is a neural network wiring diagram that specifies synaptic neurotransmitters and junction types. It does not however quantify synaptic connection strengths. It is believed that measuring these must be done in live specimens, requiring emerging or yet to be developed techniques. Without the connection strengths, it is not fully known how the nematode's nervous system produces sensory-motor behaviors.</p> <p>Bionet is an attempt to compute the connection strengths that produce desired sensory-motor behaviors. This is done by a hybrid genetic algorithm that trains a large space of 3000+ weights representing synapse connection strengths to perform given sensory-motor sequences. The algorithm uses both global and local optimization techniques that take advantage of the topology of the connectome. An artificial worm embodying the connectome and trained to perform sensory-motor behaviors taken from measurements of the actual C. elegans would then behave realistically in an artificial environment. This is an important step toward creating a fully functional artificial worm. Indeed, knowing the artificial weights might cast light on the actual ones.</p> <p>Using the NEURON simulation tool as a fitness evaluation function, the pharyngeal neuron assembly has been trained to produce given activation patterns, reducing activation differences from more than 50% to less than 5%. Looking ahead, training worm locomotion behaviors using Movement Validation measurements as models will allow the neural network to drive the Sibernetic body model realistically.</p>"},{"location":"Projects/optimization/#issues-list","title":"Issues list","text":"<p>none</p>"},{"location":"Projects/optimization/#associated-repositories","title":"Associated Repositories","text":"Repository Description Language HeuristicWorm Executes a genetic algorithm to train a model of a neuron <p>C++</p> bionet Artificial neural network for training C. elegans behaviors <p>C++</p>"},{"location":"Projects/sibernetic/","title":"NeuroMechanical Modeling - Sibernetic","text":"<p>While our ultimate goal is to simulate every cell in the c. Elegans, we are starting out by building a model of its body, its nervous system, and its environment. Sibernetic is the home of the C++ code base that implements the core of the model. We have implemented an algorithm called Smoothed Particle Hydrodynamics (SPH) to simulate the body of the worm and its environment using GPUs. This algorithm has been initially worked out in C++ (with OpenGL visualization).</p> <p>To get a quick idea of what this looks like, check out the latest movie. In this movie you can see a simulated 3D C. elegans being activated in an environment. Its muscles are located around the outside of its body, and as they turn red, they are exerting forces on the body that cause the bending to happen.</p>"},{"location":"Projects/sibernetic/#previous-accomplishments","title":"Previous accomplishments","text":"<ul> <li>Physics tests</li> <li>Initial worm crawling</li> </ul>"},{"location":"Projects/sibernetic/#current-roadmap","title":"Current roadmap","text":""},{"location":"Projects/sibernetic/#electrofluid-paper","title":"Electrofluid Paper","text":"<p>We are writing a manuscript focusing on the work we have to implement SPH in the project and apply it to muscle cells and the worm body. @vellamike, @a-palyanov and @skhayrulin are taking the lead on this.</p> <p>The proposal is to do this after the Sibernetic proof of concept worm wiggling, both of which have since been completed.</p>"},{"location":"Projects/sibernetic/#issues-list","title":"Issues list","text":"<p>All issues related to the Sibernetic code base can be found on GitHub.</p>"},{"location":"Projects/sibernetic/#associated-repositories","title":"Associated Repositories","text":"Repository Description Language Smoothed-Particle-Hydrodynamics The Sibernetic code base containing the 2014 version of the worm body model, <p>a C++ implementation of the Smoothed Particle Hydrodynamics algorithm customised for the OpenWorm project.</p> C++ ConfigurationGenerator Generation start scene configuration for PCI SPH solver JavaScript CyberElegans Circa 2010 Neuromechanical model of C. Elegans C++"},{"location":"Projects/worm-movement/","title":"Movement Analysis","text":"<p>In order to know that we are making meaningful scientific progress, we need to validate the model using information from real worms. The movement analysis team is working with an existing database of worm movement to make the critical comparisons.</p> <p>The main goal of the Movement Analysis team is to finish a test pipeline so the OpenWorm project can run a behavioural phenotyping of its virtual worm, using the same statistical tests the Schafer lab used on their real worm data.</p>"},{"location":"Projects/worm-movement/#tools-built","title":"Tools Built","text":"<ul> <li>Open Worm Analysis Toolbox</li> <li>Tracker-Commons file format</li> </ul> <p>For more information, please visit the above pages.</p>"},{"location":"Projects/worm-movement/#current-roadmap","title":"Current roadmap","text":""},{"location":"Projects/worm-movement/#story-build-a-test-suite-for-the-simulation-from-wormbehavior-database","title":"STORY: Build a test suite for the simulation from WormBehavior database","text":"<p>As a scientist or developer, I want to be able to run a test suite against the simulation that will show me how close the model is to real data.</p> <p>In order for a model to demonstrate scientific value, it has to make falsifiable predictions. The target data to be able to predict will be drawn from the WormBehavior database. This milestone will involve working with these data, creating a code base that can compare movement output from the simulation with ground truth from the database and produce an accuracy score.</p> <p>This story breaks down the epic to predict behavior from the WormBehavior database.</p>"},{"location":"Projects/worm-movement/#epic-correctly-predict-80-of-wild-type-n2-behavior-in-wormbehavior-database","title":"EPIC: Correctly predict 80% of wild type (N2) behavior in WormBehavior database","text":"<p>This epic is to have a simulation that can demonstrate it can predict (and therefore reproduce) 80% of the data collected about the N2 worm in the WormBehavior database. This means building a training set and a test set that are kept separate from each other, using the training set to tune up the model, then generating predictions, and comparing them against the test set, and doing some cross-validation).</p> <p>This epic focuses on an output of simulation performance rather than the means of implementation, so any way to achieve this epic is welcome.</p> <p>More information on next steps is available in a recent progress report.</p>"},{"location":"Projects/worm-movement/#issues-list","title":"Issues list","text":"<p>Please visit the issues listed in the below repositories.</p>"},{"location":"Projects/worm-movement/#associated-repositories","title":"Associated Repositories","text":"<p>OpenWorm Port of Schafer Lab's Worm Analysis Toolbox 1.3.4</p> <ul> <li>https://github.com/openworm/SegWorm  (original MATLAB code, static)</li> <li>https://github.com/JimHokanson/SegwormMatlabClasses  (Jim Hokanson's MATLAB fork, now static)</li> <li>https://github.com/openworm/open-worm-analysis-toolbox  (active Python port; formerly movement_validation)</li> </ul> <p>Cloud Computing</p> <ul> <li>https://github.com/openworm/movement_validation_cloud, forked from</li> <li>https://github.com/joebowen/movement_validation_cloud</li> </ul> <p>Worm Tracker File Format Specification and Parser</p> <ul> <li>https://github.com/openworm/tracker-commons</li> </ul> <p>Andr\u00e9 Brown's \"Eigenworms\" Code</p> <ul> <li>https://github.com/aexbrown/Motif_Analysis (Deprecated in favour of Behavioural_Syntax below)</li> <li>https://github.com/aexbrown/Behavioural_Syntax (in MATLAB)</li> <li>https://github.com/AidanRocke/behavioral_syntax (Aidan Rocke's Python port)</li> </ul> <p>Brown Lab Multiworm Tracking Code</p> <ul> <li>https://github.com/Behavioural-Genomics/tracking (Closed)</li> <li>https://github.com/ver228/Multiworm_Tracking (Avelino Javer's work)</li> <li>https://github.com/KezhiLi/Tracking_Hypo   (Kezhi Li's work; the computer vision code)</li> </ul>"},{"location":"Resources/resources/","title":"Using OpenWorm Resources","text":"<p>This page describes content that has been created by the project for use by the public. Currently we make simulation engines, visualization environments, and data sets available. Our website contains an additional list of resources that are useful to biologists in particular.</p>"},{"location":"Resources/resources/#simulation-engines","title":"Simulation engines","text":""},{"location":"Resources/resources/#geppetto","title":"Geppetto","text":"<p>Geppetto is a generic multi-algorithm integration platform written in Java and HTML5 by Cantarelli, Idili, Martinez and Khayrulin whose goal is to enable the world to play with simulations via their web browser, dramatically reducing the barrier to entry. We are currently working to port the functionality in Sibernetic (see below) into Geppetto, which would transform the experience of seeing the model from looking at a YouTube video to being able to play and interact with the model in 3D.</p> <p></p> <p>More information on running Geppetto is available online.</p> <p>The project page for Geppetto has information about getting involved in its development with OpenWorm.</p>"},{"location":"Resources/resources/#sibernetic","title":"Sibernetic","text":"<p>Sibernetic is the code base that currently implements the crawling model. Sibernetic is a C++ / Python code base by Palyanov, Khayrulin and Vella that has been created expressly for the purpose of doing research and building the model quickly.</p> <p></p> <p>More information on running Sibernetic is available online.</p> <p>The project page for Sibernetic has information about getting involved with its development.</p>"},{"location":"Resources/resources/#connectome-engine-and-lego-mindstorms-robot","title":"Connectome Engine and Lego Mindstorms robot","text":"<p>To start getting some practical experience playing with dynamics that come from the connectome, we have simplified it into a project called the 'connectome engine' and integrated its dynamics into a Lego Mindstorms EV3 robot. You can see a movie of this in action.</p> <p></p> <p>More information is available at [http://www.connectomeengine.com/]</p>"},{"location":"Resources/resources/#cyberelegans","title":"CyberElegans","text":"<p>When we first started, our team in Novosibirsk had produced an awesome prototype of a neuromechanical c. elegans model which they called 'CyberElegans'. We recently published an article about it. If you watch the movie that goes along with the prototype, you can see the basic components of the loop above in action:</p> <p></p> <p>Here muscle cells cause the motion of the body of the worm along the surface of its environment.</p> <p></p> <p>Inside the worm, motor neurons are responsible for activating the muscles, which them makes the worms move. The blue portions of the loop diagram above are those aspects that are covered by the initial prototype. We are now in the process of both adding in the missing portions of the loop, as well as making the existing portions more biologically realistic, and making the software platform they are operating on more scalable.</p> <p>You can download the binary for the CyberElegans (Windows only)</p> <p>This code base is not currently in active development.</p>"},{"location":"Resources/resources/#visualization-environments","title":"Visualization Environments","text":""},{"location":"Resources/resources/#wormbrowser","title":"WormBrowser","text":"<p>Explore the c. elegans in 3D! The WormBrowser is an interactive virtual experience of browsing the C. elegans worm anatomy. This is built from the Virtual Worm Blender files</p> <p>Source code for the web version and an iOS version are available online. We don't currently have active development happening with either, but if you are interested in helping with the iOS code base, here's a walkthrough of how to get started with the codebase.</p>"},{"location":"Resources/resources/#data-sets","title":"Data sets","text":""},{"location":"Resources/resources/#owmeta","title":"OWMeta","text":"<p>A Python API for accessing information about C. elegans is available at OWMeta. This API consolidates information from our publicly accessible archive of data sets that we have come across and adapted on Google Drive.</p>"},{"location":"Resources/resources/#c-elegans-neuroml-model-in-neuroconstruct","title":"C. elegans NeuroML model in NeuroConstruct","text":"<p>The NeuroML conversion of the Virtual Worm Blender files has been imported into a neuroConstruct project. This page provides instructions for obtaining the latest version of neuroConstruct, getting the latest CElegans project and generating/visualizing the cells and connections.</p> <p></p> <p>More information about working with the data within it and other data entities can be found on the data representation project page</p>"},{"location":"Resources/running-nc/","title":"Running the NeuroML connectome in NeuroConstruct","text":"<p>The NeuroML conversion of the Virtual Worm Blender files has been imported into a neuroConstruct project.</p> <p>This page provides instructions for obtaining the latest version of neuroConstruct, getting the latest CElegans project and generating/visualising the cells and connections.</p>"},{"location":"Resources/running-nc/#install-neuroconstruct-and-the-celegans-project","title":"Install neuroConstruct and the CElegans project","text":"<p>There is a quick-start zip file containing neuroConstruct and the C. elegans connectome project. Installation instructions are in the file README.txt inside the zip file.</p> <p>If you have any problems installing the quick-start package, please e-mail openworm-bundle -at- magic-cookie.co.uk with a description of what went wrong.</p> <p>If you are a developer, or need the very latest changes, you may prefer to install from the GitHub repositories instead. See the advanced installation instructions at the end of this page for details.</p>"},{"location":"Resources/running-nc/#open-the-project","title":"Open the project","text":"<p>Run neuroConstruct as outlined in the installation instructions (using ant run or nC.bat/nC.sh). In the main menu select File -&gt; Open and browse to the location of CElegans.ncx. Select this file and press Open.</p> <p>The project may take up to 20 seconds to load. When it does load, try clicking on one of the cells in the Cell Types in project box, e.g. ADAL. This will take you to the Cell Types tab and show a summary of the cell's electrical properties (note: these are not yet matched to the real electrophysiological properties of Celegans cells!) and the number of segments in the cell.</p> <p>Click on View/edit morphology and this will visualise the cell in 3D, see below.</p> <p></p>"},{"location":"Resources/running-nc/#generate-a-network","title":"Generate a network","text":"<p>Now generate a subset network. Go to tab Generate, select 'PharyngealNeurons_inputs' from the dropdown and press Generate cell positions and connections. Now go to tab Visualisation and press View with Latest Generated Positions selected in the drop down box. On a Mac, you can hold down the option button, click and drag downwards to zoom in further than the slider allows.</p> <p>Alternatively, you can generate a network of all 302 neurons. Go to tab Generate and select 'Default Simulation Configuration' from the dropdown and press Generate cell positions and connections.</p> <p>The image below shows the generated full network.</p> <p></p>"},{"location":"Resources/running-nc/#executing-the-network-in-neuron-simulation-environment","title":"Executing the network in NEURON simulation environment.","text":"<p>Install the NEURON simulation environment and set the path to NEURON's bin directory containing nrniv within neuroConstruct's menu (Settings-&gt;General Preferences and Project Defaults). After generating cell positions (easiest to do this with the PharyngealNeurons_inputs configuration), go to the export tab, the NEURON subtab, and press 'create hoc simulation'. Once this is completed the button will stop being greyed out and the 'Run simulation' button will be available. Clicking this should kick off the simulation run. Once this is completed, the output from the simulation should tell you that results are available in a directory named 'Sim_XX' where XX will be a number. Go back to the Visualisation tab and click 'View Prev Sims in 3D...\" Click on the box with the 'Sim_XX' name that applies to the simulation run you did and press 'Load Simulation' at the bottom. Then at the bottom of the Visualisation screen click 'Replay' and the 'Replay simulation'. For PharyngealNeurons_inputs, the color changes will be subtle, but they will be happening.</p>"},{"location":"Resources/running-nc/#check-the-project","title":"Check the project","text":"<p>In addition to being able to generate and view the project through the main GUI, a number of Python scripts are provided to test the configuration of the project. These scripts access functionality in the Java implementation of neuroConstruct by using Jython. More details on the Python interface to neuroConstruct can be found here.</p> <p>A script to test various aspects of the project is CheckProject.py. Running this generates a number of the Simulation Configurations in succession and checks that the expected numbers of cells and connections are created:</p> <pre><code>cd pythonScripts\n~/neuroConstruct/nC.sh -python CheckProject.py\n</code></pre>"},{"location":"Resources/running-nc/#generate-neuroml-from-the-project","title":"Generate NeuroML from the project","text":"<p>A NeuroML file containing the structure of the cells &amp; all connections can be generated in two ways:</p>"},{"location":"Resources/running-nc/#through-the-gui","title":"Through the GUI","text":"<p>After generating the network in the GUI as outlined above, go to tab Export, click on Generate all NeuroML scripts. To have a single file with all the NeuroML for cells, channels and network connections, select Generate single NeuroML Level 3 file.</p>"},{"location":"Resources/running-nc/#using-a-python-script","title":"Using a Python script","text":"<p>Go to folder <code>pythonScript</code> and run:</p> <pre><code>~/neuroConstruct/nC.sh -python GenerateNeuroML.py\n</code></pre>"},{"location":"Resources/running-nc/#advanced-installation-instructions","title":"Advanced installation instructions","text":"<p>This section describes how to install directly from the GitHub repositories. If you are a developer, or need the very latest changes, this may be a better option than using the quick-start bundle.</p>"},{"location":"Resources/running-nc/#install-the-latest-neuroconstruct","title":"Install the latest neuroConstruct","text":"<p>First, get the latest version of neuroConstruct from GitHub. While there are binary installers available on the neuroConstruct download page, it's best to use the latest version of this application from the GitHub repository, as this will most likely be the version in which the C. elegans project was last saved.</p> <p>For full details on installing neuroConstruct from GitHub, see here: https://github.com/NeuralEnsemble/neuroConstruct/blob/master/INSTALL</p> <p>Contact p.gleeson -at- ucl.ac.uk if there you have any problems with this.</p>"},{"location":"Resources/running-nc/#getting-the-latest-celegans-neuroconstruct-project","title":"Getting the latest CElegans neuroConstruct project","text":"<p>The latest CElegans project is being hosted on Github here. You have a number of options for getting the project:</p>"},{"location":"Resources/running-nc/#a-zip-file-with-latest-project","title":"A) Zip file with latest project","text":"<p>Get a zipped file with the project here. Unzip this and go to the CElegans folder.</p>"},{"location":"Resources/running-nc/#b-read-only-copy-of-latest-project","title":"B) Read only copy of latest project","text":"<p>Install Git and get a read only clone of the Git repository:</p> <pre><code>git clone git://github.com/openworm/CElegansNeuroML.git\ncd CElegansNeuroML/CElegans\n</code></pre> <p>You'll always be able to retrieve the latest version of the project with</p> <pre><code>git pull\n</code></pre>"},{"location":"Resources/running-nc/#c-fork-the-project","title":"C) Fork the project","text":"<p>Fork yourself a personal copy of the project repository. Go to https://github.com/openworm/CElegansNeuroML for more details.</p>"}]}